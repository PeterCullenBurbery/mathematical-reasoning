(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    289408,       6561]
NotebookOptionsPosition[    279478,       6375]
NotebookOutlinePosition[    279925,       6392]
CellTagsIndexPosition[    279882,       6389]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Part a and b", "Section",
 CellChangeTimes->{{3.87820859084624*^9, 
  3.8782085924786835`*^9}},ExpressionUUID->"d55f3321-3431-404e-980c-\
cae7e1c8aa0f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", "x", "]"}]], "Input",
 CellChangeTimes->{{3.8782083140112143`*^9, 3.878208314698655*^9}},
 CellLabel->
  "In[307]:=",ExpressionUUID->"340099e7-9e6f-4de2-82e4-2cf31c8b321f"],

Cell[BoxData[
 RowBox[{"Log", "[", "x", "]"}]], "Output",
 CellChangeTimes->{3.8782083154798884`*^9},
 CellLabel->
  "Out[307]=",ExpressionUUID->"65d0adde-ec5e-4cca-b6c1-fb869b59e72a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"Log", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "i"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8782083181640167`*^9, 3.8782083275551057`*^9}},
 CellLabel->
  "In[308]:=",ExpressionUUID->"8ca22725-9480-43ce-910a-f61b5fd71cbe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "x"], ",", 
   RowBox[{"-", 
    FractionBox["1", 
     SuperscriptBox["x", "2"]]}], ",", 
   FractionBox["2", 
    SuperscriptBox["x", "3"]], ",", 
   RowBox[{"-", 
    FractionBox["6", 
     SuperscriptBox["x", "4"]]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8782083279769764`*^9},
 CellLabel->
  "Out[308]=",ExpressionUUID->"46c09bd2-0a81-4f60-9b84-c35faa98ba5b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"Log", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "i"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "40"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8782083181640167`*^9, 3.8782083275551057`*^9}, {
  3.878208473346478*^9, 3.8782084752915087`*^9}},
 CellLabel->
  "In[309]:=",ExpressionUUID->"7d26bef2-e6ed-414f-a4ae-a34c62b8b6ed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "x"], ",", 
   RowBox[{"-", 
    FractionBox["1", 
     SuperscriptBox["x", "2"]]}], ",", 
   FractionBox["2", 
    SuperscriptBox["x", "3"]], ",", 
   RowBox[{"-", 
    FractionBox["6", 
     SuperscriptBox["x", "4"]]}], ",", 
   FractionBox["24", 
    SuperscriptBox["x", "5"]], ",", 
   RowBox[{"-", 
    FractionBox["120", 
     SuperscriptBox["x", "6"]]}], ",", 
   FractionBox["720", 
    SuperscriptBox["x", "7"]], ",", 
   RowBox[{"-", 
    FractionBox["5040", 
     SuperscriptBox["x", "8"]]}], ",", 
   FractionBox["40320", 
    SuperscriptBox["x", "9"]], ",", 
   RowBox[{"-", 
    FractionBox["362880", 
     SuperscriptBox["x", "10"]]}], ",", 
   FractionBox["3628800", 
    SuperscriptBox["x", "11"]], ",", 
   RowBox[{"-", 
    FractionBox["39916800", 
     SuperscriptBox["x", "12"]]}], ",", 
   FractionBox["479001600", 
    SuperscriptBox["x", "13"]], ",", 
   RowBox[{"-", 
    FractionBox["6227020800", 
     SuperscriptBox["x", "14"]]}], ",", 
   FractionBox["87178291200", 
    SuperscriptBox["x", "15"]], ",", 
   RowBox[{"-", 
    FractionBox["1307674368000", 
     SuperscriptBox["x", "16"]]}], ",", 
   FractionBox["20922789888000", 
    SuperscriptBox["x", "17"]], ",", 
   RowBox[{"-", 
    FractionBox["355687428096000", 
     SuperscriptBox["x", "18"]]}], ",", 
   FractionBox["6402373705728000", 
    SuperscriptBox["x", "19"]], ",", 
   RowBox[{"-", 
    FractionBox["121645100408832000", 
     SuperscriptBox["x", "20"]]}], ",", 
   FractionBox["2432902008176640000", 
    SuperscriptBox["x", "21"]], ",", 
   RowBox[{"-", 
    FractionBox["51090942171709440000", 
     SuperscriptBox["x", "22"]]}], ",", 
   FractionBox["1124000727777607680000", 
    SuperscriptBox["x", "23"]], ",", 
   RowBox[{"-", 
    FractionBox["25852016738884976640000", 
     SuperscriptBox["x", "24"]]}], ",", 
   FractionBox["620448401733239439360000", 
    SuperscriptBox["x", "25"]], ",", 
   RowBox[{"-", 
    FractionBox["15511210043330985984000000", 
     SuperscriptBox["x", "26"]]}], ",", 
   FractionBox["403291461126605635584000000", 
    SuperscriptBox["x", "27"]], ",", 
   RowBox[{"-", 
    FractionBox["10888869450418352160768000000", 
     SuperscriptBox["x", "28"]]}], ",", 
   FractionBox["304888344611713860501504000000", 
    SuperscriptBox["x", "29"]], ",", 
   RowBox[{"-", 
    FractionBox["8841761993739701954543616000000", 
     SuperscriptBox["x", "30"]]}], ",", 
   FractionBox["265252859812191058636308480000000", 
    SuperscriptBox["x", "31"]], ",", 
   RowBox[{"-", 
    FractionBox["8222838654177922817725562880000000", 
     SuperscriptBox["x", "32"]]}], ",", 
   FractionBox["263130836933693530167218012160000000", 
    SuperscriptBox["x", "33"]], ",", 
   RowBox[{"-", 
    FractionBox["8683317618811886495518194401280000000", 
     SuperscriptBox["x", "34"]]}], ",", 
   FractionBox["295232799039604140847618609643520000000", 
    SuperscriptBox["x", "35"]], ",", 
   RowBox[{"-", 
    FractionBox["10333147966386144929666651337523200000000", 
     SuperscriptBox["x", "36"]]}], ",", 
   FractionBox["371993326789901217467999448150835200000000", 
    SuperscriptBox["x", "37"]], ",", 
   RowBox[{"-", 
    FractionBox["13763753091226345046315979581580902400000000", 
     SuperscriptBox["x", "38"]]}], ",", 
   FractionBox["523022617466601111760007224100074291200000000", 
    SuperscriptBox["x", "39"]], ",", 
   RowBox[{"-", 
    FractionBox["20397882081197443358640281739902897356800000000", 
     SuperscriptBox["x", "40"]]}]}], "}"}]], "Output",
 CellChangeTimes->{3.878208475619593*^9},
 CellLabel->
  "Out[309]=",ExpressionUUID->"2505ae9b-3fb9-4124-9c7b-c66c9272d564"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Numerator", "Section",
 CellChangeTimes->{{3.878208578794744*^9, 
  3.8782085807256975`*^9}},ExpressionUUID->"99b8de2c-0043-47b8-a671-\
b405257db7f2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Numerator", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", "x", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "i"}], "}"}]}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "40"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8782083181640167`*^9, 3.8782083275551057`*^9}, {
  3.878208473346478*^9, 3.878208486660942*^9}},
 CellLabel->
  "In[310]:=",ExpressionUUID->"f76dfbf8-748a-4ed3-883f-2e7679b5ada5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"-", "1"}], ",", "2", ",", 
   RowBox[{"-", "6"}], ",", "24", ",", 
   RowBox[{"-", "120"}], ",", "720", ",", 
   RowBox[{"-", "5040"}], ",", "40320", ",", 
   RowBox[{"-", "362880"}], ",", "3628800", ",", 
   RowBox[{"-", "39916800"}], ",", "479001600", ",", 
   RowBox[{"-", "6227020800"}], ",", "87178291200", ",", 
   RowBox[{"-", "1307674368000"}], ",", "20922789888000", ",", 
   RowBox[{"-", "355687428096000"}], ",", "6402373705728000", ",", 
   RowBox[{"-", "121645100408832000"}], ",", "2432902008176640000", ",", 
   RowBox[{"-", "51090942171709440000"}], ",", "1124000727777607680000", ",", 
   RowBox[{"-", "25852016738884976640000"}], ",", "620448401733239439360000", 
   ",", 
   RowBox[{"-", "15511210043330985984000000"}], ",", 
   "403291461126605635584000000", ",", 
   RowBox[{"-", "10888869450418352160768000000"}], ",", 
   "304888344611713860501504000000", ",", 
   RowBox[{"-", "8841761993739701954543616000000"}], ",", 
   "265252859812191058636308480000000", ",", 
   RowBox[{"-", "8222838654177922817725562880000000"}], ",", 
   "263130836933693530167218012160000000", ",", 
   RowBox[{"-", "8683317618811886495518194401280000000"}], ",", 
   "295232799039604140847618609643520000000", ",", 
   RowBox[{"-", "10333147966386144929666651337523200000000"}], ",", 
   "371993326789901217467999448150835200000000", ",", 
   RowBox[{"-", "13763753091226345046315979581580902400000000"}], ",", 
   "523022617466601111760007224100074291200000000", ",", 
   RowBox[{"-", "20397882081197443358640281739902897356800000000"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.878208486954604*^9},
 CellLabel->
  "Out[310]=",ExpressionUUID->"f892120c-d95c-41cf-8768-8a08bae0f630"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindSequenceFunction", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Numerator", "[", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"Log", "[", "x", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "i"}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "40"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8782084900541596`*^9, 3.878208491788114*^9}},
 CellLabel->
  "In[311]:=",ExpressionUUID->"a79e398d-cb3d-4e2c-9ac5-e18b1a9e8497"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "#1"]}], " ", 
   RowBox[{"Pochhammer", "[", 
    RowBox[{"1", ",", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "#1"}]}], "]"}]}], "&"}]], "Output",
 CellChangeTimes->{3.8782084948193784`*^9},
 CellLabel->
  "Out[311]=",ExpressionUUID->"655dabd2-5d15-421a-a155-43d4e6780eda"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindSequenceFunction", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Numerator", "[", 
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"Log", "[", "x", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "i"}], "}"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "40"}], "}"}]}], "]"}], ",", "p"}], "]"}]], "Input",
 CellChangeTimes->{{3.8782084900541596`*^9, 3.8782085007814274`*^9}},
 CellLabel->
  "In[312]:=",ExpressionUUID->"b8b69944-07fd-4a01-b64b-441ce02ec137"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "p"]}], " ", 
  RowBox[{"Pochhammer", "[", 
   RowBox[{"1", ",", 
    RowBox[{
     RowBox[{"-", "1"}], "+", "p"}]}], "]"}]}]], "Output",
 CellChangeTimes->{3.878208503117444*^9},
 CellLabel->
  "Out[312]=",ExpressionUUID->"af78a5ec-75b7-4854-bc1e-1fe4670ba28e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "p"]}], " ", 
   RowBox[{"Pochhammer", "[", 
    RowBox[{"1", ",", 
     RowBox[{
      RowBox[{"-", "1"}], "+", "p"}]}], "]"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[313]:=",ExpressionUUID->"c74518e6-27dd-4337-acae-b00c7768555d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "p"]}], " ", 
  RowBox[{"Gamma", "[", "p", "]"}]}]], "Output",
 CellChangeTimes->{3.8782085071672134`*^9},
 CellLabel->
  "Out[313]=",ExpressionUUID->"92a656ec-d9c6-4cde-924a-417e7b8c750e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["-(-1)^p gamma(p)", "WolframAlphaLong",
 CellChangeTimes->{{3.878208509639468*^9, 3.8782085165493383`*^9}},
 CellLabel->
  "In[314]:=",ExpressionUUID->"e2fd9df6-8c06-47ed-a4b7-40876d78e6a7"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "-(-1)^p gamma(p)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"-((-1)^p Gamma[p])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 SuperscriptBox[
                  RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"]}], " ", 
               TemplateBox[{"p"}, "Gamma"]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {"text" -> "\[CapitalGamma](x) is the gamma function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Gamma.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Gamma", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/GammaFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], 
                RowBox[{"p", "+", "1"}]], " ", 
               TemplateBox[{"p"}, "Gamma"]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(-1)^(1 + p) Gamma[p], {p, -2.7, 2.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max11883$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min11882$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11882$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11883$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4847252$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min11882$\
4847257$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max11883$\
4847258$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max11883$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min11882$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4847252$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11882$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11882$\
4847257$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11883$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max11883$\
4847258$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$4847227[
                    Plot[{
                    Re[(-1)^(1 + $CellContext`p) Gamma[$CellContext`p]], 
                    Im[(-1)^(1 + $CellContext`p) Gamma[$CellContext`p]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][(-1)^(1 + $CellContext`p) 
                    Gamma[$CellContext`p], {$CellContext`p, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11882$$], 
                    (
                    Piecewise[{{-0.375 + 
                    2.5389817981680314` Tan[1.5040801783846716` #], # < 
                    0}}, -0.375 + 
                    2.5389817981680314` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min11882$$], \
-2.75], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11882$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max11883$$]], 
                    (
                    Piecewise[{{-0.375 + 
                    2.5389817981680314` Tan[1.5040801783846716` #], # < 
                    0}}, -0.375 + 
                    2.5389817981680314` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min11882$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max11883$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11882$$ + 
                    0.00475, 
                    CalculateUtilities`GraphicsUtilities`Private`max11883$$]],
                     2.]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min11882$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max11883$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4847227]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4847227[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[CalculateUtilities`GraphicsUtilities`Private`pt, 1, 
                    2]]}, ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4847227[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtFEJviABHYxJA0pSvteLL42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0xt4emzNSM5zWQj67jRXoDWTIr2Cz25bE4PZA05+APW+69a8l2pOjD+/\
wvcJTwpODHw1jDPDQE/\
3FckzlujaM1bs2P5kymVCOPsJT4cvhy92hzseBmMZE2NACf28LWSeKaIh7SHQNWveciK++\
eOj8vip4DyG7wWIBPQD650oQi2MFIRjPsG3Xm6m7mJihghKFL1wmpw8R20v0EYxMZvAPMc3zidrpy0\
wUTPtublXcrNJQT78m/hAxi4m73FJu7MjMCyMS0bfWVn9c+4GeH7dFl7Jk/\
XEYX5vOPJGDDsGvUrns9Z18oxUXeuiX3B1UfNlq0GeP2Xq/6VDps1qGLttw4D5ka3xeu2twg/\
bwsscu34h7vvWfPaOEnDdcKgE91HSgi+iaKY88BJtn67OrcNj3Kn4jtEZUsEKJ7Jxlv3i+\
uNhBV5vCjHWbroF6Yh6BkSQg3VRx+\
0emzEzyogiiQVeXNcvm2wi61AC7mxfeyYoswPME7JpeUJzkC7VnZgk+/\
JHxa3kcqbJkPcDYWAGaqPob2F9lCVX0IkMjCTGC5p6DeawSmpMVLDsByVInBPBEJL9sh/\
3zT9crgRSta9QXcqzOHClOQ1Pol8W+BDEzGTNHTtwdAW3LWYTyZNadRFL0+Vpsz2m+\
02mGzc0B3ooCaElCR/o3abQbQp/dVNY2YO7NaFbE7o1oVsTujXh/10TXMT4r/QbUw24jg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[(-1)^(1 + p) Gamma[p], {p, -15., 14.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max11885$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min11884$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11884$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11885$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4847351$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min11884$\
4847352$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max11885$\
4847353$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max11885$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min11884$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4847351$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min11884$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11884$\
4847352$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max11885$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max11885$\
4847353$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$4847328[
                    Plot[{
                    Re[(-1)^(1 + $CellContext`p) Gamma[$CellContext`p]], 
                    Im[(-1)^(1 + $CellContext`p) Gamma[$CellContext`p]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][(-1)^(1 + $CellContext`p) 
                    Gamma[$CellContext`p], {$CellContext`p, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11884$$], 
                    (
                    Piecewise[{{-0.375 + 
                    15.233890789008187` Tan[1.5040801783846716` #], # < 
                    0}}, -0.375 + 
                    15.233890789008187` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min11884$$], \
-14.625], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min11884$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max11885$$]], 
                    (
                    Piecewise[{{-0.375 + 
                    15.233890789008187` Tan[1.5040801783846716` #], # < 
                    0}}, -0.375 + 
                    15.233890789008187` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min11884$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max11885$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min11884$$ + 
                    0.0285, 
                    CalculateUtilities`GraphicsUtilities`Private`max11885$$]],
                     13.875]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["p", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min11884$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max11885$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4847328]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4847328[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`lines === {}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4847328[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMgFWCL0hAB2PSgJKU7/\
XiS2rh2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozkvNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoT48+\
v8H3Ck4ITA18N48ww0NM9RfIZS3TtGSt2ZH8y5TIhnP2Ex8OXwxc7w6ceBmMZE2NACb3TFjKfKaIh7\
SHQFWveciK++\
eOD8vip4DyG7wWIBPQ9650oQi2MFIRjPsG3XmymbmNihghKFD13mpw8R20v0EYxkU1gnuMbZ5P1rC0\
wUZn23NwpudmkIB/+dXwgYxeT97ik3dkRGBbGBaPvtKz+OXcDPL9uC6/\
k8XriML83HHkjhh2BXqXzSes6eUaqrnXRL7g6r/my1SDPnjL1/9IB02Y1jOdtw4D5oa3xeu2twg/\
bwsscu34h7rvWfPaOEnDdcKgE91HSgi+iaKY88BJtn67OrcNj3Kr4jtEZUsEKJ7Jxlv3i+uN+\
BV5vCjHWbroF6Yh6BkSQg3VRx+\
0uy5gZzYgiiQVeXNcvm2wi61AC7mxfeyYoswPME7JpeUKzny7VnZhk9uWPilvJ5VSTIe/\
7wkAGaqPob2B9lCVX0IkMjCTGC5p6DeawSmpMVLDsByVInBPBEJL9sh/\
3zT9crgRStadQXcqzOHClOQlPol8W+ABEZmbNHTtwdAW3LWYTyeNadRFL0+Vpsz2m+\
02mGzc0B3ooCaElCR/o3abQbQp/dVNY2YO7NaFbE7o1oVsTujXh/10TXMT4r/QbUx24jg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], 
                RowBox[{"p", "+", "1"}]], " ", 
               RowBox[{
                 RowBox[{"(", 
                   RowBox[{"p", "-", "1"}], ")"}], "!"}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Factorial.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate forms assuming p>0", "scanner" -> 
     "Simplification", "id" -> 
     "AlternateFormAssumingAllVariablesAreRealAndPositive", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Simplify[PowerExpand[(-1)^(1 + p) Gamma[p]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "p"}]]}], " ", 
               TemplateBox[{"p"}, "Gamma"]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "PowerExpand[(-1)^(1 + p) Gamma[p], Assumptions -> {}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox["\[ExponentialE]", 
                RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                  RowBox[{"(", 
                    RowBox[{"p", "+", "1"}], ")"}]}]], " ", 
               TemplateBox[{"p"}, "Gamma"]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming p is real", "scanner" -> 
     "Simplification", "id" -> "AlternateFormAssumingAllVariablesAreReal", 
     "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ComplexExpand[(-1)^(1 + p) Gamma[p]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 RowBox[{
                   RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", "p"}], ")"}]}], " ", 
                   TemplateBox[{"p"}, "Gamma"]}]}], "-", 
               RowBox[{"\[ImaginaryI]", " ", 
                 RowBox[{"sin", "(", 
                   RowBox[{"\[Pi]", " ", "p"}], ")"}], " ", 
                 TemplateBox[{"p"}, "Gamma"]}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> 
     "NoSolutionsFromReduce", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement[
       "minput", {}, {"Reduce[{(-1)^(1 + p) Gamma[p] == 0}, {p}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"no roots exist\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Series expansion at p = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtp=0.", "position" -> "800", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[(-1)^(1 + p) Gamma[p], {p, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "p"]}], "+", 
                    RowBox[{"(", 
                    RowBox[{
                    TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], "-", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}]}], ")"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    FractionBox[
                    SuperscriptBox[
                    TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], "2"], "2"]}]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], " ", "\[Pi]"}], "+", 
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "12"]}], ")"}], " ", 
                    "p"}], "+", 
                    RowBox[{
                    FractionBox["1", "12"], " ", 
                    SuperscriptBox["p", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], "3"]}], "-", 
                    RowBox[{"6", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], "2"], " ", "\[Pi]"}], "-", 
                    RowBox[{"5", " ", 
                    TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "3"]}], "-", 
                    RowBox[{"2", " ", 
                    TemplateBox[{"2", "1"}, "PolyGamma2"]}]}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "480"], " ", 
                    SuperscriptBox["p", "3"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"20"}], " ", 
                    SuperscriptBox[
                    TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], "4"]}]}], "+", 
                    RowBox[{"80", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox[
                    TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], "3"], " ", "\[Pi]"}], "+", 
                    RowBox[{"100", " ", 
                    SuperscriptBox[
                    TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], "2"], " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "-", 
                    RowBox[{"40", " ", "\[ImaginaryI]", " ", 
                    TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], " ", 
                    SuperscriptBox["\[Pi]", "3"]}], "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["\[Pi]", "4"]}], "+", 
                    RowBox[{"80", " ", 
                    TagBox["\[DoubledGamma]", 
                    Function[{}, EulerGamma]], " ", 
                    TemplateBox[{"2", "1"}, "PolyGamma2"]}], "-", 
                    RowBox[{"80", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
                    TemplateBox[{"2", "1"}, "PolyGamma2"]}]}], ")"}]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["p", "4"], ")"}], 
                    SeriesData[$CellContext`p, 0, {}, -1, 4, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"p", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"EulerGamma", "-", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}]}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    SuperscriptBox["EulerGamma", "2"], "2"]}], "+", 
                    
                    RowBox[{"\[ImaginaryI]", " ", "EulerGamma", " ", 
                    "\[Pi]"}], "+", 
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "12"]}], ",", 
                    RowBox[{
                    FractionBox["1", "12"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SuperscriptBox["EulerGamma", "3"]}], "-", 
                    RowBox[{"6", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["EulerGamma", "2"], " ", "\[Pi]"}], "-", 
                    RowBox[{"5", " ", "EulerGamma", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "3"]}], "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"PolyGamma", "[", 
                    RowBox[{"2", ",", "1"}], "]"}]}]}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "480"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "20"}], " ", 
                    SuperscriptBox["EulerGamma", "4"]}], "+", 
                    RowBox[{"80", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["EulerGamma", "3"], " ", "\[Pi]"}], "+", 
                    RowBox[{"100", " ", 
                    SuperscriptBox["EulerGamma", "2"], " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "-", 
                    
                    RowBox[{"40", " ", "\[ImaginaryI]", " ", "EulerGamma", 
                    " ", 
                    SuperscriptBox["\[Pi]", "3"]}], "-", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["\[Pi]", "4"]}], "+", 
                    RowBox[{"80", " ", "EulerGamma", " ", 
                    RowBox[{"PolyGamma", "[", 
                    RowBox[{"2", ",", "1"}], "]"}]}], "-", 
                    RowBox[{"80", " ", "\[ImaginaryI]", " ", "\[Pi]", " ", 
                    RowBox[{"PolyGamma", "[", 
                    RowBox[{"2", ",", "1"}], "]"}]}]}], ")"}]}]}], "}"}], ",", 
                    RowBox[{"-", "1"}], ",", "4", ",", "1"}], "]"}]}, 
                 "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Laurent series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement[
       "info", {
        "text" -> 
         "polygamma(n, x) is the nth derivative of the digamma function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/PolyGamma.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/PolyGamma2", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/PolygammaFunction.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "gamma is the Euler-Mascheroni constant"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/EulerGamma.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/Euler-MascheroniConstant.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Series expansion at p = \[Infinity]", "scanner" -> 
     "Series", "id" -> "SeriesExpansionAtp=Infinity", "position" -> "900", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[(-1)^(1 + p) Gamma[p], {p, Infinity, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              SuperscriptBox["\[ExponentialE]", 
               RowBox[{"p", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"log", "(", "p", ")"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}], "-", "1"}], 
                   ")"}]}]], " ", 
              RowBox[{"(", 
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    SqrtBox[
                    RowBox[{"2", " ", "\[Pi]"}]], " ", 
                    SqrtBox[
                    FractionBox["1", "p"]]}]}], "-", 
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    SqrtBox[
                    FractionBox["\[Pi]", "2"]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "p"], ")"}], 
                    RowBox[{"3", "/", "2"}]]}], "-", 
                    RowBox[{
                    FractionBox["1", "144"], " ", 
                    SqrtBox[
                    FractionBox["\[Pi]", "2"]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "p"], ")"}], 
                    RowBox[{"5", "/", "2"}]]}], "+", 
                    FractionBox[
                    RowBox[{"139", " ", 
                    SqrtBox[
                    FractionBox["\[Pi]", "2"]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "p"], ")"}], 
                    RowBox[{"7", "/", "2"}]]}], "25920"], "+", 
                    FractionBox[
                    RowBox[{"571", " ", 
                    SqrtBox[
                    FractionBox["\[Pi]", "2"]], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "p"], ")"}], 
                    RowBox[{"9", "/", "2"}]]}], "1244160"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "p"], ")"}], 
                    RowBox[{"11", "/", "2"}]], ")"}], 
                    SeriesData[$CellContext`p, 
                    DirectedInfinity[1], {}, 1, 11, 2], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"p", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    SqrtBox[
                    RowBox[{"2", " ", "\[Pi]"}]]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    SqrtBox[
                    FractionBox["\[Pi]", "2"]], "6"]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    SqrtBox[
                    FractionBox["\[Pi]", "2"]], "144"]}], ",", "0", ",", 
                    FractionBox[
                    RowBox[{"139", " ", 
                    SqrtBox[
                    FractionBox["\[Pi]", "2"]]}], "25920"], ",", "0", ",", 
                    FractionBox[
                    RowBox[{"571", " ", 
                    SqrtBox[
                    FractionBox["\[Pi]", "2"]]}], "1244160"]}], "}"}], ",", 
                    "1", ",", "11", ",", "2"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus], ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "1000", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[(-1)^(1 + p) Gamma[p], p]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "p"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "p"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"]}], " ", 
                    TemplateBox[{"p"}, "Gamma"]}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"-", "\[ImaginaryI]"}], " ", 
                 SuperscriptBox[
                  RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                 TemplateBox[{"p"}, "Gamma"], " ", 
                 RowBox[{"(", 
                   RowBox[{"\[Pi]", "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    TemplateBox[{"0", "p"}, "PolyGamma2"]}]}], ")"}]}], 
               Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Derivative__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "GlobalExtrema", "id" -> "Limit", 
     "position" -> "1100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Limit[(-1)^(1 + p) Gamma[p], p -> -Infinity]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TemplateBox[{
                 RowBox[{
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"1", "+", "p"}]], " ", 
                   TemplateBox[{"p"}, "Gamma"]}], "p", 
                 RowBox[{"-", "\[Infinity]"}]}, "Limit2Arg", SyntaxForm -> 
                Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], HoldForm], 
              "\[LongEqual]", "0"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
   Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
   Typeset`pod40$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False, False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "ListOrTimes", "word" -> "", "template" -> 
        "Assuming multiplication${separator}Use ${desc} instead", "count" -> 
        "2", "pulldown" -> "false", "default" -> 
        "\"ListOrTimes\" -> \"Times\""}, {
        XMLElement[
        "value", {
         "name" -> "Times", "desc" -> "multiplication", "input" -> 
          "\"ListOrTimes\" -> \"Times\""}, {}], 
        XMLElement[
        "value", {
         "name" -> "List", "desc" -> "a list", "input" -> 
          "\"ListOrTimes\" -> \"List\""}, {}]}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "10", "datatypes" -> "Math", "timedout" -> 
     "GlobalExtrema,InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "3.903", "parsetiming" -> "0.356", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa7281hgi01h5f57bc69400003bg5df5706i80ei9822558548030476863", "id" -> 
     "MSP7291hgi01h5f57bc69400004ehfeb4i238gdg63", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "12", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa7301hgi01h5f57bc694000051ib446004d44c7b822558548030476863", "version" -> 
     "2.6", "inputstring" -> "-(-1)^p gamma(p)"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "1", "datatypes" -> "Math", "timedout" -> 
     "InterestingDefiniteIntegrals,\
InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "5.105", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "14", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "14", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "-(-1)^p gamma(p)"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 23, 11, 8, 42.0137562`9.37596638556347}, "Line" -> 
    314, "SessionID" -> 16943083377698340012}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
    37, 38, 39, 40}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "-(-1)^p gamma(p)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
         Typeset`pod40$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{503., {752.3544921875, 757.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
          Typeset`pod40$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa7281hgi01h5f57bc69400003bg5df5706i80ei9822558548030476863", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.878208522230875*^9},ExpressionUUID->"95a7851b-7858-49cc-b44c-\
71cdfbb5874c"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Denominator", "Section",
 CellChangeTimes->{{3.8782086018766403`*^9, 
  3.8782086044272337`*^9}},ExpressionUUID->"9ea9ecd1-a9bb-446b-b4c9-\
33b93b05601a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Denominator", "[", 
    RowBox[{"D", "[", 
     RowBox[{
      RowBox[{"Log", "[", "x", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "i"}], "}"}]}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "40"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878208605911612*^9, 3.8782086159328265`*^9}},
 CellLabel->
  "In[315]:=",ExpressionUUID->"fd5943db-bd86-4cb6-bc32-4bfb75a6c745"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", 
   SuperscriptBox["x", "2"], ",", 
   SuperscriptBox["x", "3"], ",", 
   SuperscriptBox["x", "4"], ",", 
   SuperscriptBox["x", "5"], ",", 
   SuperscriptBox["x", "6"], ",", 
   SuperscriptBox["x", "7"], ",", 
   SuperscriptBox["x", "8"], ",", 
   SuperscriptBox["x", "9"], ",", 
   SuperscriptBox["x", "10"], ",", 
   SuperscriptBox["x", "11"], ",", 
   SuperscriptBox["x", "12"], ",", 
   SuperscriptBox["x", "13"], ",", 
   SuperscriptBox["x", "14"], ",", 
   SuperscriptBox["x", "15"], ",", 
   SuperscriptBox["x", "16"], ",", 
   SuperscriptBox["x", "17"], ",", 
   SuperscriptBox["x", "18"], ",", 
   SuperscriptBox["x", "19"], ",", 
   SuperscriptBox["x", "20"], ",", 
   SuperscriptBox["x", "21"], ",", 
   SuperscriptBox["x", "22"], ",", 
   SuperscriptBox["x", "23"], ",", 
   SuperscriptBox["x", "24"], ",", 
   SuperscriptBox["x", "25"], ",", 
   SuperscriptBox["x", "26"], ",", 
   SuperscriptBox["x", "27"], ",", 
   SuperscriptBox["x", "28"], ",", 
   SuperscriptBox["x", "29"], ",", 
   SuperscriptBox["x", "30"], ",", 
   SuperscriptBox["x", "31"], ",", 
   SuperscriptBox["x", "32"], ",", 
   SuperscriptBox["x", "33"], ",", 
   SuperscriptBox["x", "34"], ",", 
   SuperscriptBox["x", "35"], ",", 
   SuperscriptBox["x", "36"], ",", 
   SuperscriptBox["x", "37"], ",", 
   SuperscriptBox["x", "38"], ",", 
   SuperscriptBox["x", "39"], ",", 
   SuperscriptBox["x", "40"]}], "}"}]], "Output",
 CellChangeTimes->{3.8782086162921886`*^9},
 CellLabel->
  "Out[315]=",ExpressionUUID->"8bdcb7e1-45f5-485a-9e25-0dfdefff4a2d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindSequenceFunction", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Denominator", "[", 
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"Log", "[", "x", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "i"}], "}"}]}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "40"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.878208642943407*^9, 3.8782086444747095`*^9}},
 CellLabel->
  "In[317]:=",ExpressionUUID->"93bb6c5f-490a-411c-be19-a9042acb6ca5"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["x", "#1"], "&"}]], "Output",
 CellChangeTimes->{3.8782086662890635`*^9},
 CellLabel->
  "Out[317]=",ExpressionUUID->"daa98592-0a3f-44f9-ae62-68044a340db7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindSequenceFunction", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Denominator", "[", 
      RowBox[{"D", "[", 
       RowBox[{
        RowBox[{"Log", "[", "x", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "i"}], "}"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "40"}], "}"}]}], "]"}], ",", "p"}], "]"}]], "Input",
 CellChangeTimes->{{3.878208642943407*^9, 3.8782086444747095`*^9}, {
  3.8782086884201517`*^9, 3.8782086897482815`*^9}},
 CellLabel->
  "In[318]:=",ExpressionUUID->"0811fb1d-9452-46af-9b9e-d89e9b5f1774"],

Cell[BoxData[
 SuperscriptBox["x", "p"]], "Output",
 CellChangeTimes->{3.8782087117690597`*^9},
 CellLabel->
  "Out[318]=",ExpressionUUID->"4046b239-ce9b-4ab9-a3c1-c1c7f38cd5ae"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conjecture", "Section",
 CellChangeTimes->{{3.8782087214948254`*^9, 
  3.8782087229233475`*^9}},ExpressionUUID->"51d47107-1168-4681-bd23-\
18729b1da737"],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "p"]}], 
   RowBox[{"Gamma", "[", "p", "]"}]}], 
  SuperscriptBox["x", "p"]]], "Input",
 CellChangeTimes->{{3.878208724532871*^9, 3.8782087388865023`*^9}, {
  3.8782088234433274`*^9, 3.87820882381842*^9}},
 CellLabel->
  "In[324]:=",ExpressionUUID->"25126f07-645b-46c5-ac77-166b676b598d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "p"]}], " ", 
  SuperscriptBox["x", 
   RowBox[{"-", "p"}]], " ", 
  RowBox[{"Gamma", "[", "p", "]"}]}]], "Output",
 CellChangeTimes->{3.878208739355157*^9, 3.878208824224577*^9},
 CellLabel->
  "Out[324]=",ExpressionUUID->"26d4f898-87f0-4163-98d4-bb3a8090fb18"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  FractionBox[
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "p"]}], 
    RowBox[{"Gamma", "[", "p", "]"}]}], 
   SuperscriptBox["x", "p"]], "]"}]], "Input",
 CellChangeTimes->{{3.878208826068387*^9, 3.8782088283652797`*^9}},
 CellLabel->
  "In[325]:=",ExpressionUUID->"cebd88ee-7852-48d0-bb02-9c9d9a3a68c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "p"]}], " ", 
  SuperscriptBox["x", 
   RowBox[{"-", "p"}]], " ", 
  RowBox[{"Gamma", "[", "p", "]"}]}]], "Output",
 CellChangeTimes->{3.8782088288183613`*^9},
 CellLabel->
  "Out[325]=",ExpressionUUID->"1d72748f-5c9a-4cfd-b644-dc67c6619b6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], "p"]}], 
     RowBox[{"Gamma", "[", "p", "]"}]}], 
    SuperscriptBox["x", "p"]], ",", 
   RowBox[{"{", 
    RowBox[{"p", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8782087439463716`*^9, 3.8782087488432207`*^9}, {
  3.8782088439302464`*^9, 3.8782088442271247`*^9}},
 CellLabel->
  "In[326]:=",ExpressionUUID->"d72bdc7e-e072-44e6-ac46-0688a13e2142"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "x"], ",", 
   RowBox[{"-", 
    FractionBox["1", 
     SuperscriptBox["x", "2"]]}], ",", 
   FractionBox["2", 
    SuperscriptBox["x", "3"]], ",", 
   RowBox[{"-", 
    FractionBox["6", 
     SuperscriptBox["x", "4"]]}], ",", 
   FractionBox["24", 
    SuperscriptBox["x", "5"]], ",", 
   RowBox[{"-", 
    FractionBox["120", 
     SuperscriptBox["x", "6"]]}], ",", 
   FractionBox["720", 
    SuperscriptBox["x", "7"]], ",", 
   RowBox[{"-", 
    FractionBox["5040", 
     SuperscriptBox["x", "8"]]}], ",", 
   FractionBox["40320", 
    SuperscriptBox["x", "9"]], ",", 
   RowBox[{"-", 
    FractionBox["362880", 
     SuperscriptBox["x", "10"]]}], ",", 
   FractionBox["3628800", 
    SuperscriptBox["x", "11"]], ",", 
   RowBox[{"-", 
    FractionBox["39916800", 
     SuperscriptBox["x", "12"]]}], ",", 
   FractionBox["479001600", 
    SuperscriptBox["x", "13"]], ",", 
   RowBox[{"-", 
    FractionBox["6227020800", 
     SuperscriptBox["x", "14"]]}], ",", 
   FractionBox["87178291200", 
    SuperscriptBox["x", "15"]], ",", 
   RowBox[{"-", 
    FractionBox["1307674368000", 
     SuperscriptBox["x", "16"]]}], ",", 
   FractionBox["20922789888000", 
    SuperscriptBox["x", "17"]], ",", 
   RowBox[{"-", 
    FractionBox["355687428096000", 
     SuperscriptBox["x", "18"]]}], ",", 
   FractionBox["6402373705728000", 
    SuperscriptBox["x", "19"]], ",", 
   RowBox[{"-", 
    FractionBox["121645100408832000", 
     SuperscriptBox["x", "20"]]}]}], "}"}]], "Output",
 CellChangeTimes->{3.878208749171384*^9, 3.878208844695877*^9},
 CellLabel->
  "Out[326]=",ExpressionUUID->"972c9547-ffff-4019-9195-a51bbee25a98"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     RowBox[{"Log", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "p"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8782087439463716`*^9, 3.8782087606397877`*^9}},
 CellLabel->
  "In[321]:=",ExpressionUUID->"73aa890b-e5c1-478f-934e-1181d2d64f8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "x"], ",", 
   RowBox[{"-", 
    FractionBox["1", 
     SuperscriptBox["x", "2"]]}], ",", 
   FractionBox["2", 
    SuperscriptBox["x", "3"]], ",", 
   RowBox[{"-", 
    FractionBox["6", 
     SuperscriptBox["x", "4"]]}], ",", 
   FractionBox["24", 
    SuperscriptBox["x", "5"]], ",", 
   RowBox[{"-", 
    FractionBox["120", 
     SuperscriptBox["x", "6"]]}], ",", 
   FractionBox["720", 
    SuperscriptBox["x", "7"]], ",", 
   RowBox[{"-", 
    FractionBox["5040", 
     SuperscriptBox["x", "8"]]}], ",", 
   FractionBox["40320", 
    SuperscriptBox["x", "9"]], ",", 
   RowBox[{"-", 
    FractionBox["362880", 
     SuperscriptBox["x", "10"]]}], ",", 
   FractionBox["3628800", 
    SuperscriptBox["x", "11"]], ",", 
   RowBox[{"-", 
    FractionBox["39916800", 
     SuperscriptBox["x", "12"]]}], ",", 
   FractionBox["479001600", 
    SuperscriptBox["x", "13"]], ",", 
   RowBox[{"-", 
    FractionBox["6227020800", 
     SuperscriptBox["x", "14"]]}], ",", 
   FractionBox["87178291200", 
    SuperscriptBox["x", "15"]], ",", 
   RowBox[{"-", 
    FractionBox["1307674368000", 
     SuperscriptBox["x", "16"]]}], ",", 
   FractionBox["20922789888000", 
    SuperscriptBox["x", "17"]], ",", 
   RowBox[{"-", 
    FractionBox["355687428096000", 
     SuperscriptBox["x", "18"]]}], ",", 
   FractionBox["6402373705728000", 
    SuperscriptBox["x", "19"]], ",", 
   RowBox[{"-", 
    FractionBox["121645100408832000", 
     SuperscriptBox["x", "20"]]}]}], "}"}]], "Output",
 CellChangeTimes->{3.878208761061575*^9},
 CellLabel->
  "Out[321]=",ExpressionUUID->"291ba2c5-7708-4197-a652-77d50d7fef1f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AllTrue", "[", 
   RowBox[{"p", "\[Function]", 
    RowBox[{
     RowBox[{"D", "[", 
      RowBox[{
       RowBox[{"Log", "[", "x", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "p"}], "}"}]}], "]"}], "==", 
     FractionBox[
      RowBox[{
       RowBox[{"-", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "p"]}], 
       RowBox[{"Gamma", "[", "p", "]"}]}], 
      SuperscriptBox["x", "p"]]}]}], "]"}], "[", 
  RowBox[{"Range", "[", "100", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8782087439463716`*^9, 3.878208809953633*^9}, {
  3.8782088518694315`*^9, 3.8782088522374296`*^9}},
 CellLabel->
  "In[327]:=",ExpressionUUID->"f40d295d-e0b1-4db7-a39e-3f0f6ae85887"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.878208768005123*^9, 3.8782088103437324`*^9, 
  3.8782088526997733`*^9},
 CellLabel->
  "Out[327]=",ExpressionUUID->"11bd643a-d96a-4e7a-a5b4-3a8c19ee1fb2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TraditionalForm", "[", 
  FractionBox[
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "p"]}], 
    RowBox[{"Gamma", "[", "p", "]"}]}], 
   SuperscriptBox["x", "p"]], "]"}]], "Input",
 CellChangeTimes->{{3.878208862499335*^9, 3.8782088652526903`*^9}},
 CellLabel->
  "In[328]:=",ExpressionUUID->"2e03baad-c059-45d6-b62b-06fb87e59d9a"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "p"]}], " ", 
   SuperscriptBox["x", 
    RowBox[{"-", "p"}]], " ", 
   TemplateBox[{"p"},
    "Gamma"]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8782088655886583`*^9},
 CellLabel->
  "Out[328]//TraditionalForm=",ExpressionUUID->"df799c68-bd50-4adc-9f24-\
f08d7837a499"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "p"]}], 
   SuperscriptBox["x", 
    RowBox[{"-", "p"}]], 
   RowBox[{"\[CapitalGamma]", "(", "p", ")"}]}], TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"2bb5e52d-dc8c-4c86-823f-9212bb08a341"]], \
"WolframAlphaLong",
 CellChangeTimes->{{3.8782089035159035`*^9, 3.878208916886287*^9}},
 CellLabel->
  "In[329]:=",ExpressionUUID->"12d63906-3ad0-4f91-a7c1-9906762ce899"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "-(-1)^p x^-p \[CapitalGamma](p)", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {
     "AlternativeRepresentations:MathematicalFunctionIdentityData__More", 
      "Derivative__Step-by-step solution", "Derivative__Hide steps"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"((-(-1)^p) Gamma[p])/x^p"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 SuperscriptBox[
                  RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"]}], " ", 
               SuperscriptBox["x", 
                RowBox[{"-", "p"}]], " ", 
               TemplateBox[{"p"}, "Gamma"]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {"text" -> "\[CapitalGamma](x) is the gamma function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Gamma.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Gamma", "text" -> 
           "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/GammaFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], 
                RowBox[{"p", "+", "1"}]], " ", 
               SuperscriptBox["x", 
                RowBox[{"-", "p"}]], " ", 
               TemplateBox[{"p"}, "Gamma"]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], 
                RowBox[{"p", "+", "1"}]], " ", 
               RowBox[{
                 RowBox[{"(", 
                   RowBox[{"p", "-", "1"}], ")"}], "!"}], " ", 
               SuperscriptBox["x", 
                RowBox[{"-", "p"}]]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Factorial.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod4$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate forms assuming p and x are positive", 
     "scanner" -> "Simplification", "id" -> 
     "AlternateFormAssumingAllVariablesAreRealAndPositive", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Simplify[PowerExpand[((-1)^(1 + p) Gamma[p])/x^p]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "p"}]]}], " ", 
               SuperscriptBox["x", 
                RowBox[{"-", "p"}]], " ", 
               TemplateBox[{"p"}, "Gamma"]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "PowerExpand[((-1)^(1 + p) Gamma[p])/x^p, Assumptions -> {}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox["\[ExponentialE]", 
                RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                  RowBox[{"(", 
                    RowBox[{"p", "+", "1"}], ")"}]}]], " ", 
               SuperscriptBox["x", 
                RowBox[{"-", "p"}]], " ", 
               TemplateBox[{"p"}, "Gamma"]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Root", "scanner" -> "Reduce", "id" -> "LocusSolution", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Reduce[((-1)^(1 + p) Gamma[p])/x^p == 0, {p, x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   TemplateBox[{",   ", "\",   \"", 
                    RowBox[{
                    RowBox[{"Re", "(", "p", ")"}], "<", "0"}], 
                    RowBox[{"x", "\[LongEqual]", "0"}]}, "RowWithSeparators"],
                    BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Re(z) is the real part of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Re.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Re", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/RealPart.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "100", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[((-1)^(1 + p) Gamma[p])/x^p, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[PartialD]", 
                  RowBox[{"\"\[PartialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    TemplateBox[{"p"}, "Gamma"]}], 
                    SuperscriptBox["x", "p"]]}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{
                 SuperscriptBox[
                  RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", "p", " ", 
                 SuperscriptBox["x", 
                  RowBox[{
                    RowBox[{"-", 
                    RowBox[{"p"}]}], "-", "1"}]], " ", 
                 TemplateBox[{"p"}, "Gamma"]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement[
         "info", {"text" -> "\[CapitalGamma](x) is the gamma function"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Gamma.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/GammaBetaErf/Gamma", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/GammaFunction.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement[
       "minput", {}, {"Integrate[((-1)^(1 + p) Gamma[p])/x^p, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"1", "+", "p"}]], " ", 
                    SuperscriptBox["x", 
                    RowBox[{"-", "p"}]], " ", 
                    TemplateBox[{"p"}, "Gamma"]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    SuperscriptBox["x", 
                    RowBox[{"1", "-", "p"}]], " ", 
                    TemplateBox[{"p"}, "Gamma"]}], 
                    RowBox[{"p", "-", "1"}]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Alternative representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "7"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "((-(-1)^p) Gamma[p])/x^p == -((BarnesG[1 + p] (-1)^p)/(x^p \
BarnesG[p]))"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    TemplateBox[{"p"}, "Gamma"]}], 
                   SuperscriptBox["x", "p"]]}], "\[LongEqual]", 
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    TemplateBox[{
                    RowBox[{"1", "+", "p"}]}, "BarnesG"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"]}], 
                   RowBox[{
                    SuperscriptBox["x", "p"], " ", 
                    TemplateBox[{"p"}, "BarnesG"]}]]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "((-(-1)^p) Gamma[p])/x^p == -(((-1)^p E^(-LogBarnesG[p] + \
LogBarnesG[1 + p]))/x^p)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    TemplateBox[{"p"}, "Gamma"]}], 
                   SuperscriptBox["x", "p"]]}], "\[LongEqual]", 
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    InterpretationBox[
                    "logG", LogBarnesG, Editable -> False, Selectable -> 
                    False], "(", "p", ")"}]}], "+", 
                    RowBox[{
                    InterpretationBox[
                    "logG", LogBarnesG, Editable -> False, Selectable -> 
                    False], "(", 
                    RowBox[{"1", "+", "p"}], ")"}]}]]}], 
                   SuperscriptBox["x", "p"]]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "((-(-1)^p) Gamma[p])/x^p == -(((-1 + p)! (-1)^p)/x^p)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    TemplateBox[{"p"}, "Gamma"]}], 
                   SuperscriptBox["x", "p"]]}], "\[LongEqual]", 
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "p"}], ")"}], "!"}], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"]}], 
                   SuperscriptBox["x", "p"]]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "((-(-1)^p) Gamma[p])/x^p == -((Pochhammer[1, -1 + p] (-1)^p)/x^p)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    TemplateBox[{"p"}, "Gamma"]}], 
                   SuperscriptBox["x", "p"]]}], "\[LongEqual]", 
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    TemplateBox[{"1", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "p"}]}, "Pochhammer", SyntaxForm -> 
                    SubscriptBox], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"]}], 
                   SuperscriptBox["x", "p"]]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "((-(-1)^p) Gamma[p])/x^p == -(((-1)^p E^LogGamma[p])/x^p)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    TemplateBox[{"p"}, "Gamma"]}], 
                   SuperscriptBox["x", "p"]]}], "\[LongEqual]", 
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    TemplateBox[{"p"}, "LogGamma"]]}], 
                   SuperscriptBox["x", "p"]]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "((-(-1)^p) Gamma[p])/x^p == ((-(-1)^p) Gamma[p, 0])/x^p /; Re[p] > \
0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    TemplateBox[{"p"}, "Gamma"]}], 
                    SuperscriptBox["x", "p"]]}], "\[LongEqual]", 
                  RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    TemplateBox[{"p", "0"}, "Gamma2"]}], 
                    SuperscriptBox["x", "p"]]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   RowBox[{
                    RowBox[{"Re", "(", "p", ")"}], ">", "0"}], HoldForm]}, 
                 "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "((-(-1)^p) Gamma[p])/x^p == -(((-2 + 2 p)!! (-1)^p 2^((3 - 4 p + \
Cos[2 p Pi])/4) Pi^(Sin[p Pi]^2/2))/x^p)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    TemplateBox[{"p"}, "Gamma"]}], 
                   SuperscriptBox["x", "p"]]}], "\[LongEqual]", 
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "2"}], "+", 
                    RowBox[{"2", " ", "p"}]}], ")"}], "!!"}], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "p"], " ", 
                    SuperscriptBox["2", 
                    RowBox[{
                    RowBox[{"1", "/", "4"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"3", "-", 
                    RowBox[{"4", " ", "p"}], "+", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "p", " ", "\[Pi]"}], ")"}]}], ")"}]}]], 
                    " ", 
                    SuperscriptBox["\[Pi]", 
                    RowBox[{
                    RowBox[{"1", "/", "2"}], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", 
                    RowBox[{"p", " ", "\[Pi]"}], ")"}]}]]}], 
                   SuperscriptBox["x", "p"]]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}], 
       XMLElement["infos", {"count" -> "10"}, {
         XMLElement[
         "info", {"text" -> "\[CapitalGamma](x) is the gamma function"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Gamma.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/GammaBetaErf/Gamma", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/GammaFunction.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement["info", {"text" -> "G(z) is the Barnes G-function"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/BarnesG.html",
              "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/BarnesG-Function.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement[
         "info", {
          "text" -> "logG(z) gives the logarithm of the Barnes G-function"}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://reference.wolfram.com/language/ref/LogBarnesG.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/BarnesG-Function.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement["info", {"text" -> "n! is the factorial function"}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://reference.wolfram.com/language/ref/Factorial.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement[
         "info", {
          "text" -> "(a)_n is the Pochhammer symbol (rising factorial)"}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://reference.wolfram.com/language/ref/Pochhammer.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/GammaBetaErf/Pochhammer", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/PochhammerSymbol.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement[
         "info", {
          "text" -> 
           "log\[CapitalGamma](x) is the logarithm of the gamma function"}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://reference.wolfram.com/language/ref/LogGamma.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/GammaBetaErf/LogGamma", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/LogGammaFunction.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement[
         "info", {
          "text" -> 
           "\[CapitalGamma](a, x) is the incomplete gamma function"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Gamma.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/GammaBetaErf/Gamma2", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> 
             "http://mathworld.wolfram.com/IncompleteGammaFunction.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement["info", {"text" -> "Re(z) is the real part of z"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Re.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/ComplexComponents/Re", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/RealPart.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement[
         "info", {"text" -> "n!! is the double factorial function"}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://reference.wolfram.com/language/ref/Factorial2.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial2", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/DoubleFactorial.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
         XMLElement["info", {}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://functions.wolfram.com/GammaBetaErf/Gamma/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "7"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Less", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__Less"},\
 {}]}]}], Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
   Typeset`pod37$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False, False, False, False, False, False, False}, True}, 
   Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "ListOrTimes", "word" -> "", "template" -> 
        "Assuming multiplication${separator}Use ${desc} instead", "count" -> 
        "2", "pulldown" -> "false", "default" -> 
        "\"ListOrTimes\" -> \"Times\""}, {
        XMLElement[
        "value", {
         "name" -> "Times", "desc" -> "multiplication", "input" -> 
          "\"ListOrTimes\" -> \"Times\""}, {}], 
        XMLElement[
        "value", {
         "name" -> "List", "desc" -> "a list", "input" -> 
          "\"ListOrTimes\" -> \"List\""}, {}]}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "7", "datatypes" -> "Math", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "3.8360000000000003", "parsetiming" -> 
     "0.437", "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa10731de8i7i731460gc200005f9g7a154a5ae23f3454770973695860617", "id" -> 
     "MSP10741de8i7i731460gc200004g5881ci0c8676a4", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "17", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa10751de8i7i731460gc200004i0342igib8ig6a23454770973695860617", "version" -> 
     "2.6", "inputstring" -> "-(-1)^p x^-p \[CapitalGamma](p)"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "1", "datatypes" -> "Math", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "5.181", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "5", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "5", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "-(-1)^p x^-p \[CapitalGamma](p)"}},
    Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 23, 11, 15, 22.0832557`9.096638030290835}, "Line" -> 
    329, "SessionID" -> 16943083377698340012}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8}, Typeset`failedpods$$ = {9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
    37}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "-(-1)^p x^-p \[CapitalGamma](p)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1070., {480.8544921875, 486.1455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$}, Typeset`chosen$$, Typeset`open$$, 
         Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa10731de8i7i731460gc200005f9g7a154a5ae23f3454770973695860617", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8782089222551346`*^9},ExpressionUUID->"8fa57604-0182-4d1b-add2-\
02a187a0cad7"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Proving the inductive step", "Section",
 CellChangeTimes->{{3.8782093226254992`*^9, 
  3.8782093266638007`*^9}},ExpressionUUID->"e1800fed-50a5-4019-8363-\
b98847989964"],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox[
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "p"]}], 
   RowBox[{"Gamma", "[", "p", "]"}]}], 
  SuperscriptBox["x", "p"]]], "Input",
 CellLabel->
  "In[330]:=",ExpressionUUID->"36a61d6d-7e0f-434f-9edf-f67f69776974"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "p"]}], " ", 
  SuperscriptBox["x", 
   RowBox[{"-", "p"}]], " ", 
  RowBox[{"Gamma", "[", "p", "]"}]}]], "Output",
 CellChangeTimes->{3.878209328237875*^9},
 CellLabel->
  "Out[330]=",ExpressionUUID->"e7fc63f2-ab23-4e4d-815c-e2487b8f27e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], "p"]}], 
     RowBox[{"Gamma", "[", "p", "]"}]}], 
    SuperscriptBox["x", "p"]], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.878209329253463*^9, 3.8782093305517387`*^9}},
 CellLabel->
  "In[331]:=",ExpressionUUID->"bf9f45e1-8552-43c5-b743-ce6b01a1b817"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"-", "1"}], ")"}], "p"], " ", "p", " ", 
  SuperscriptBox["x", 
   RowBox[{
    RowBox[{"-", "1"}], "-", "p"}]], " ", 
  RowBox[{"Gamma", "[", "p", "]"}]}]], "Output",
 CellChangeTimes->{3.8782093310360117`*^9},
 CellLabel->
  "Out[331]=",ExpressionUUID->"7ea207a9-7cfa-4afd-81f1-70aa25f789a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "p"]}], 
    RowBox[{"Gamma", "[", "p", "]"}]}], 
   SuperscriptBox["x", "p"]], "/.", 
  RowBox[{"{", 
   RowBox[{"p", "->", "q"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.878209339510029*^9, 3.878209359124029*^9}},
 CellLabel->
  "In[335]:=",ExpressionUUID->"20539f05-c111-4b40-b992-d8809b2466a5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "q"]}], " ", 
  SuperscriptBox["x", 
   RowBox[{"-", "q"}]], " ", 
  RowBox[{"Gamma", "[", "q", "]"}]}]], "Output",
 CellChangeTimes->{{3.878209342181808*^9, 3.87820936052728*^9}},
 CellLabel->
  "Out[335]=",ExpressionUUID->"ce276b26-c35d-4d10-b1d6-0dfba21db30f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], "p"]}], 
      RowBox[{"Gamma", "[", "p", "]"}]}], 
     SuperscriptBox["x", "p"]], "/.", 
    RowBox[{"{", 
     RowBox[{"p", "->", "q"}], "}"}]}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8782093636523504`*^9, 3.8782093650898075`*^9}},
 CellLabel->
  "In[336]:=",ExpressionUUID->"878f66d0-2b40-4900-a080-4c8767fdb686"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"-", "1"}], ")"}], "q"], " ", "q", " ", 
  SuperscriptBox["x", 
   RowBox[{
    RowBox[{"-", "1"}], "-", "q"}]], " ", 
  RowBox[{"Gamma", "[", "q", "]"}]}]], "Output",
 CellChangeTimes->{3.878209365730482*^9},
 CellLabel->
  "Out[336]=",ExpressionUUID->"c3f7e261-1961-4378-b1e6-dd215815e5d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], 
      RowBox[{"p", "+", "1"}]]}], 
    RowBox[{"Gamma", "[", 
     RowBox[{"p", "+", "1"}], "]"}]}], 
   SuperscriptBox["x", 
    RowBox[{"p", "+", "1"}]]], "/.", 
  RowBox[{"{", 
   RowBox[{"p", "->", "q"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.87820939121917*^9, 3.878209401287304*^9}},
 CellLabel->
  "In[337]:=",ExpressionUUID->"c7daa10d-f788-459e-8270-cdc31614c98e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], 
    RowBox[{"1", "+", "q"}]]}], " ", 
  SuperscriptBox["x", 
   RowBox[{
    RowBox[{"-", "1"}], "-", "q"}]], " ", 
  RowBox[{"Gamma", "[", 
   RowBox[{"1", "+", "q"}], "]"}]}]], "Output",
 CellChangeTimes->{3.878209401771628*^9},
 CellLabel->
  "Out[337]=",ExpressionUUID->"0f40b4d2-5a66-4773-bba3-0f150f670fa8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    FractionBox[
     RowBox[{
      RowBox[{"-", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"-", "1"}], ")"}], 
        RowBox[{"p", "+", "1"}]]}], 
      RowBox[{"Gamma", "[", 
       RowBox[{"p", "+", "1"}], "]"}]}], 
     SuperscriptBox["x", 
      RowBox[{"p", "+", "1"}]]], "/.", 
    RowBox[{"{", 
     RowBox[{"p", "->", "q"}], "}"}]}], ")"}], "==", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "q"], " ", "q", " ", 
   SuperscriptBox["x", 
    RowBox[{
     RowBox[{"-", "1"}], "-", "q"}]], " ", 
   RowBox[{"Gamma", "[", "q", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.87820939121917*^9, 3.878209418646678*^9}},
 CellLabel->
  "In[340]:=",ExpressionUUID->"a114520b-ab10-4429-b5d4-853399490da4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], 
     RowBox[{"1", "+", "q"}]]}], " ", 
   SuperscriptBox["x", 
    RowBox[{
     RowBox[{"-", "1"}], "-", "q"}]], " ", 
   RowBox[{"Gamma", "[", 
    RowBox[{"1", "+", "q"}], "]"}]}], "\[Equal]", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "q"], " ", "q", " ", 
   SuperscriptBox["x", 
    RowBox[{
     RowBox[{"-", "1"}], "-", "q"}]], " ", 
   RowBox[{"Gamma", "[", "q", "]"}]}]}]], "Output",
 CellChangeTimes->{{3.8782094091113353`*^9, 3.878209422314814*^9}},
 CellLabel->
  "Out[340]=",ExpressionUUID->"df64fb77-649c-4581-9469-f2fe0587138a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], 
       RowBox[{"1", "+", "q"}]]}], " ", 
     SuperscriptBox["x", 
      RowBox[{
       RowBox[{"-", "1"}], "-", "q"}]], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"1", "+", "q"}], "]"}]}], "\[Equal]", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "q"], " ", "q", " ", 
     SuperscriptBox["x", 
      RowBox[{
       RowBox[{"-", "1"}], "-", "q"}]], " ", 
     RowBox[{"Gamma", "[", "q", "]"}]}]}], "&&", 
   RowBox[{"x", "!=", "0"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878209436428808*^9, 3.8782094385321317`*^9}},
 NumberMarks->False,
 CellLabel->
  "In[343]:=",ExpressionUUID->"9fcb1c60-f023-4d19-8d7b-98ca98f77a88"],

Cell[BoxData[
 TemplateBox[{
  "Reduce", "fexp", 
   "\"Warning: \\!\\(\\*RowBox[{\\\"Reduce\\\"}]\\) used FunctionExpand to \
transform the system. Since FunctionExpand transformation rules are only \
generically correct, the solution set might have been altered.\"", 2, 343, 33,
    16943083377698340012, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.8782094296479692`*^9, 3.8782094388758984`*^9}},
 CellLabel->
  "During evaluation of \
In[343]:=",ExpressionUUID->"5adea467-35a2-4a1c-92b8-d4be7eeb60b9"],

Cell[BoxData[
 RowBox[{"x", "\[NotEqual]", "0"}]], "Output",
 CellChangeTimes->{{3.8782094298203993`*^9, 3.8782094390477343`*^9}},
 CellLabel->
  "Out[343]=",ExpressionUUID->"03cfac94-0bb4-46be-9aad-1c7911cdf412"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"-", "1"}], ")"}], 
       RowBox[{"1", "+", "q"}]]}], " ", 
     SuperscriptBox["x", 
      RowBox[{
       RowBox[{"-", "1"}], "-", "q"}]], " ", 
     RowBox[{"Gamma", "[", 
      RowBox[{"1", "+", "q"}], "]"}]}], "\[Equal]", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], "q"], " ", "q", " ", 
     SuperscriptBox["x", 
      RowBox[{
       RowBox[{"-", "1"}], "-", "q"}]], " ", 
     RowBox[{"Gamma", "[", "q", "]"}]}]}], "&&", 
   RowBox[{"x", "!=", "0"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878209436428808*^9, 3.8782094574299498`*^9}},
 NumberMarks->False,ExpressionUUID->"5bfce387-7934-47eb-8680-1cdb6c08bdc5"],

Cell[BoxData[
 RowBox[{"x", "\[NotEqual]", "0"}]], "Output",
 CellChangeTimes->{3.878209450409691*^9},
 CellLabel->
  "Out[344]=",ExpressionUUID->"308d93d8-d509-4fb2-a123-6d60b7278452"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"-", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"-", "1"}], ")"}], 
      RowBox[{"1", "+", "q"}]]}], " ", 
    SuperscriptBox["x", 
     RowBox[{
      RowBox[{"-", "1"}], "-", "q"}]], " ", 
    RowBox[{"Gamma", "[", 
     RowBox[{"1", "+", "q"}], "]"}]}], "-", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "q"], " ", "q", " ", 
    SuperscriptBox["x", 
     RowBox[{
      RowBox[{"-", "1"}], "-", "q"}]], " ", 
    RowBox[{"Gamma", "[", "q", "]"}]}]}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.878209463742389*^9, 3.8782094705058722`*^9}},
 CellLabel->
  "In[345]:=",ExpressionUUID->"345be8ed-346b-4492-878a-3668bf4047a2"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.8782094708036137`*^9},
 CellLabel->
  "Out[345]=",ExpressionUUID->"955d61c3-f90c-470c-a63d-110a44bca629"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], 
     RowBox[{"q", "+", "2"}]], " ", 
    SuperscriptBox["x", 
     RowBox[{
      RowBox[{"-", "1"}], "-", "q"}]], 
    RowBox[{"Gamma", "[", 
     RowBox[{"q", "+", "1"}], "]"}]}], "-", 
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], "q"], "q", " ", 
    SuperscriptBox["x", 
     RowBox[{
      RowBox[{"-", "q"}], "-", "1"}]], 
    RowBox[{"Gamma", "[", "q", "]"}]}]}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8782095596120462`*^9, 3.8782096306991973`*^9}},
 CellLabel->
  "In[351]:=",ExpressionUUID->"7a74c297-428b-47b6-9f6c-d9f1f639c584"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.878209596854989*^9, 3.8782096311209755`*^9}},
 CellLabel->
  "Out[351]=",ExpressionUUID->"10c8d4e8-619e-4cf1-8086-202682ec6ad3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"assumption", "=", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], 
     RowBox[{"p", "+", "1"}]], 
    SuperscriptBox["x", 
     RowBox[{"-", "p"}]], 
    RowBox[{"Gamma", "[", "p", "]"}]}], "/.", 
   RowBox[{"p", "->", "q"}]}]}]], "Input",
 CellChangeTimes->{{3.8782096945334845`*^9, 3.8782097143475094`*^9}},
 CellLabel->
  "In[352]:=",ExpressionUUID->"d407d215-697b-46e0-b9e5-55550c847a5a"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"-", "1"}], ")"}], 
   RowBox[{"1", "+", "q"}]], " ", 
  SuperscriptBox["x", 
   RowBox[{"-", "q"}]], " ", 
  RowBox[{"Gamma", "[", "q", "]"}]}]], "Output",
 CellChangeTimes->{3.8782097148113704`*^9},
 CellLabel->
  "Out[352]=",ExpressionUUID->"4f706489-2c96-4966-a2fe-2c769dc22216"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{"assumption", ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8782097183895035`*^9, 3.8782097222441273`*^9}},
 CellLabel->
  "In[354]:=",ExpressionUUID->"6f648dac-0732-493e-8c18-b98497ca0fcc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], 
    RowBox[{"1", "+", "q"}]]}], " ", "q", " ", 
  SuperscriptBox["x", 
   RowBox[{
    RowBox[{"-", "1"}], "-", "q"}]], " ", 
  RowBox[{"Gamma", "[", "q", "]"}]}]], "Output",
 CellChangeTimes->{{3.8782097199313345`*^9, 3.878209722620533*^9}},
 CellLabel->
  "Out[354]=",ExpressionUUID->"439c0021-6f07-4e97-8ae5-06e051f8bf9f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{"assumption", ",", "x"}], "]"}], "-", "assumption"}]], "Input",
 CellChangeTimes->{{3.8782097183895035`*^9, 3.8782097276945686`*^9}},
 CellLabel->
  "In[355]:=",ExpressionUUID->"d238edea-d820-47ab-9cbc-745ee9bb40e5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"-", "1"}], ")"}], 
     RowBox[{"1", "+", "q"}]]}], " ", "q", " ", 
   SuperscriptBox["x", 
    RowBox[{
     RowBox[{"-", "1"}], "-", "q"}]], " ", 
   RowBox[{"Gamma", "[", "q", "]"}]}], "-", 
  RowBox[{
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], 
    RowBox[{"1", "+", "q"}]], " ", 
   SuperscriptBox["x", 
    RowBox[{"-", "q"}]], " ", 
   RowBox[{"Gamma", "[", "q", "]"}]}]}]], "Output",
 CellChangeTimes->{3.878209727975814*^9},
 CellLabel->
  "Out[355]=",ExpressionUUID->"52f1b747-5ec4-430a-98a2-63feb1347694"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{"assumption", ",", "x"}], "]"}], "-", "assumption"}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8782097183895035`*^9, 3.8782097309281034`*^9}},
 CellLabel->
  "In[356]:=",ExpressionUUID->"3620f066-2d1c-4265-880c-54133962bd95"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox[
   RowBox[{"(", 
    RowBox[{"-", "1"}], ")"}], "q"], " ", 
  SuperscriptBox["x", 
   RowBox[{
    RowBox[{"-", "1"}], "-", "q"}]], " ", 
  RowBox[{"(", 
   RowBox[{"q", "+", "x"}], ")"}], " ", 
  RowBox[{"Gamma", "[", "q", "]"}]}]], "Output",
 CellChangeTimes->{3.878209731178104*^9},
 CellLabel->
  "Out[356]=",ExpressionUUID->"6b6b2adb-b840-4cd2-8b89-6be2fa8d282b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"assumption", "-", 
   RowBox[{"D", "[", 
    RowBox[{"assumption", ",", "x"}], "]"}]}], "//", 
  "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8782097183895035`*^9, 3.8782097390301633`*^9}},
 CellLabel->
  "In[357]:=",ExpressionUUID->"c4149b82-9c75-4095-9c36-bdfaca701ed9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"-", "1"}], ")"}], "q"]}], " ", 
  SuperscriptBox["x", 
   RowBox[{
    RowBox[{"-", "1"}], "-", "q"}]], " ", 
  RowBox[{"(", 
   RowBox[{"q", "+", "x"}], ")"}], " ", 
  RowBox[{"Gamma", "[", "q", "]"}]}]], "Output",
 CellChangeTimes->{3.8782097393738775`*^9},
 CellLabel->
  "Out[357]=",ExpressionUUID->"648239d8-0910-4a01-b558-ecce94f2c650"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Proof", "Section",
 CellChangeTimes->{{3.878209816322197*^9, 
  3.878209817415927*^9}},ExpressionUUID->"e7e15287-67a0-4ccc-aeb4-\
ed8b119918e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"i", ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "6", ",", "30"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878209824540924*^9, 3.8782098341542892`*^9}},
 CellLabel->
  "In[359]:=",ExpressionUUID->"a57fafcb-8c51-418f-909f-880c5fcde57f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", 
   "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", 
   ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", 
   "26", ",", "27", ",", "28", ",", "29", ",", "30"}], "}"}]], "Output",
 CellChangeTimes->{{3.8782098316674604`*^9, 3.8782098344354153`*^9}},
 CellLabel->
  "Out[359]=",ExpressionUUID->"cd33bfb9-2d6c-4442-88bf-8ed3121feb00"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{
       RowBox[{"Apply", "[", 
        RowBox[{"Inactive", "[", "Plus", "]"}], "]"}], "[", 
       RowBox[{
        RowBox[{"IntegerPartitions", "[", 
         RowBox[{"i", ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "Infinity"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "5"}], "}"}], ",", "1"}], "]"}], "//", "First"}],
        "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "6", ",", "30"}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.878209824540924*^9, 3.8782098853841996`*^9}, {
  3.878210047725645*^9, 3.8782101159755373`*^9}},
 CellLabel->
  "In[365]:=",ExpressionUUID->"deb144fa-a79f-42bb-b0e1-ff3183e72aff"],

Cell[BoxData[
 TagBox[GridBox[{
    {"6", 
     RowBox[{"2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"7", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"8", 
     RowBox[{"2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"9", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"10", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5"}]},
    {"11", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"12", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"13", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"14", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"15", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5"}]},
    {"16", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"17", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"18", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"19", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"20", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5"}]},
    {"21", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"22", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"23", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"24", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"25", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5"}]},
    {"26", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"27", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"28", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"29", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "2"}]},
    {"30", 
     RowBox[{"5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5", 
      TagBox["+",
       "InactiveToken",
       BaseStyle->"Inactive",
       SyntaxForm->"+"], "5"}]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.8782098859255767`*^9, {3.8782100735532885`*^9, 3.878210116295644*^9}},
 CellLabel->
  "Out[365]=",ExpressionUUID->"d5eff7ad-f2f0-4c63-b58a-dfdb12e8e4f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sum", "[", 
  RowBox[{
   FractionBox["1", 
    RowBox[{"n", 
     RowBox[{"(", 
      RowBox[{"n", "+", "1"}], ")"}]}]], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "p"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878210332434511*^9, 3.87821034928232*^9}},
 CellLabel->
  "In[366]:=",ExpressionUUID->"acb3c9b9-f40f-4d38-b955-a6b74e60c2e9"],

Cell[BoxData[
 RowBox[{"1", "-", 
  FractionBox["1", 
   RowBox[{"1", "+", "p"}]]}]], "Output",
 CellChangeTimes->{3.878210349768006*^9},
 CellLabel->
  "Out[366]=",ExpressionUUID->"6667b17f-cf58-4bf2-bd05-2b2c64b83289"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Sum", "[", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"n", 
       RowBox[{"(", 
        RowBox[{"n", "+", "1"}], ")"}]}]], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "p"}], "}"}]}], "]"}], "==", 
   FractionBox["p", 
    RowBox[{"p", "+", "1"}]]}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.878210332434511*^9, 3.8782103616858425`*^9}},
 CellLabel->
  "In[367]:=",ExpressionUUID->"a642aa1b-d4eb-4194-966f-0728d8390395"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8782103619416246`*^9},
 CellLabel->
  "Out[367]=",ExpressionUUID->"5aa676de-dd05-43d0-97ba-19d11aa7be2c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["sum of 1/p(p+1) from 1 to n", "WolframAlphaLong",
 CellChangeTimes->{{3.8782103705947948`*^9, 3.878210381421858*^9}},
 CellLabel->
  "In[368]:=",ExpressionUUID->"6ad37d71-dd2d-415b-8fbb-48921c844918"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "sum of 1/p(p+1) from 1 to n", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"PartialSums__More terms", "Values__More"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Sum", "scanner" -> "Sum", "id" -> "Result", "position" -> 
     "100", "error" -> "false", "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Sum[(1/p) (p + 1), {p, 1, n}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                UnderoverscriptBox["\[Sum]", 
                 RowBox[{"p", "=", "1"}], "n"], 
                FractionBox[
                 RowBox[{"p", "+", "1"}], "p"]}], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 
                 TemplateBox[{"n"}, "HarmonicNumber", SyntaxForm -> 
                  SubscriptBox], "+", "n"}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "H_n is the nth harmonic number"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/HarmonicNumber.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/HarmonicNumber",
            "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HarmonicNumber.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Partial sums", "scanner" -> "Sum", "id" -> 
     "PartialSums", "position" -> "100", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ListLinePlot[Accumulate[Table[(1/p) (p + 1), {p, 1, 11}]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{}, {{{}, {}, {
                 Hue[0.67, 0.6, 0.6], 
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 LineBox[{{1., 2.}, {2., 3.5}, {3., 4.833333333333333}, {
                  4.000000000000001, 6.083333333333333}, {5., 
                  7.283333333333333}, {6., 8.45}, {7.000000000000002, 
                  9.592857142857143}, {8.000000000000002, 
                  10.717857142857143`}, {9., 11.828968253968254`}, {10., 
                  12.928968253968254`}, {11., 14.019877344877345`}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]], 
                 GeometricTransformationBox[
                  InsetBox[
                   BoxData[
                    FormBox[
                    StyleBox[
                    GraphicsBox[{
                    EdgeForm[], 
                    DiskBox[{0, 0}]}], 
                    GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                    PointSize[0.012833333333333334`], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, StripOnInput -> False], 
                    TraditionalForm]], {0., 0.}, Automatic, 
                   NCache[
                    Offset[
                    Rational[50, 7]], 
                    Offset[7.142857142857143]]], {{{1., 2.}}, {{2., 3.5}}, {{
                  3., 4.833333333333333}}, {{4.000000000000001, 
                  6.083333333333333}}, {{5., 7.283333333333333}}, {{6., 
                  8.45}}, {{7.000000000000002, 9.592857142857143}}, {{
                  8.000000000000002, 10.717857142857143`}}, {{9., 
                  11.828968253968254`}}, {{10., 12.928968253968254`}}, {{11., 
                  14.019877344877345`}}}]}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}, {{
                 Directive[
                  PointSize[0.012833333333333334`], 
                  RGBColor[0.24720000000000014`, 0.24, 0.6], 
                  AbsoluteThickness[1]]}, {}}}, {{}, {}}}, {
             DisplayFunction -> Identity, DisplayFunction -> Identity, 
              AspectRatio -> NCache[GoldenRatio^(-1), 0.6180339887498948], 
              Axes -> {True, True}, AxesLabel -> {
                FormBox["p", TraditionalForm], 
                FormBox[
                 SubscriptBox["\"S\"", "p"], TraditionalForm]}, 
              AxesOrigin -> {1., 0.}, AxesStyle -> Directive[
                AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
              DisplayFunction :> Identity, 
              Frame -> {{False, False}, {False, False}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                AbsoluteThickness[0.2]], 
              FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
              FrameTicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10], 
              GridLines -> {None, None}, GridLinesStyle -> Automatic, 
              ImageSize -> 220., 
              LabelStyle -> {FontSize -> 10, FontFamily -> "Roboto"}, 
              Method -> {
               "OptimizePlotMarkers" -> True, 
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
              PlotRange -> {{0, 11.}, {0., 14.019877344877345`}}, 
              PlotRangeClipping -> True, PlotRangePadding -> {{
                 Scaled[0.02], 
                 Scaled[0.02]}, {
                 Scaled[0.02], 
                 Scaled[0.05]}}, Prolog -> {
                Opacity[0], 
                TagBox[
                 RectangleBox[
                  Scaled[{0, 0}], 
                  Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
              Ticks -> {Automatic, Automatic}, TicksStyle -> 
              Directive[FontFamily -> "Times", FontSize -> 10]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "3"}, {
       XMLElement[
       "state", {
        "name" -> "Fewer terms", "input" -> "PartialSums__Fewer terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> "PartialSums__More terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Show points", "input" -> 
         "PartialSums__Show points"}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Values", "scanner" -> "Sequence", "id" -> "Values", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                  "n", BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                   RowBox[{
                    
                    TemplateBox[{"n"}, "HarmonicNumber", SyntaxForm -> 
                    SubscriptBox], "+", "n"}], 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 TagBox[
                  PaneBox[
                  "\"approximation\"", 
                   BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Center}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]]}, {"1", "2", "2"}, {
                "2", 
                 TagBox[
                  FractionBox["7", "2"], Identity], "3.5`"}, {"3", 
                 TagBox[
                  FractionBox["29", "6"], Identity], 
                 TagBox["4.833333333333333`", Identity]}, {"4", 
                 TagBox[
                  FractionBox["73", "12"], Identity], 
                 TagBox["6.083333333333333`", Identity]}, {"5", 
                 TagBox[
                  FractionBox["437", "60"], Identity], 
                 TagBox["7.283333333333333`", Identity]}, {"6", 
                 TagBox[
                  FractionBox["169", "20"], Identity], 
                 TagBox["8.45`", Identity]}, {"7", 
                 TagBox[
                  FractionBox["1343", "140"], Identity], 
                 TagBox["9.592857142857143`", Identity]}, {"8", 
                 TagBox[
                  FractionBox["3001", "280"], Identity], 
                 TagBox["10.717857142857143`", Identity]}, {"9", 
                 TagBox[
                  FractionBox["29809", "2520"], Identity], 
                 TagBox["11.828968253968254`", Identity]}, {"10", 
                 TagBox[
                  FractionBox["32581", "2520"], Identity], 
                 TagBox["12.928968253968254`", Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Right}}, "Rows" -> {{Baseline}}, 
                 "ItemsIndexed" -> {{1, 1} -> {Center, Baseline}, {1, 2} -> {
                    Center, Baseline}, {1, 3} -> {Center, Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {
                "Columns" -> {{None}}, "Rows" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata,\
numberdata"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {"text" -> "H_n is the nth harmonic number"}, {
           XMLElement[
           "link", {
            "url" -> 
             "http://reference.wolfram.com/language/ref/HarmonicNumber.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> 
             "http://functions.wolfram.com/GammaBetaErf/HarmonicNumber", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/HarmonicNumber.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement["state", {"name" -> "Less", "input" -> "Values__Less"}, {}], 
       XMLElement[
       "state", {"name" -> "More", "input" -> "Values__More"}, {}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FunctionExpand[n + HarmonicNumber[n]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"n", "+", 
               TemplateBox[{"0", 
                 RowBox[{"n", "+", "1"}]}, "PolyGamma2"], "+", 
               TagBox["\[DoubledGamma]", 
                Function[{}, EulerGamma]]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {
        "text" -> 
         "polygamma(n, x) is the nth derivative of the digamma function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/PolyGamma.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/PolyGamma2", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/PolygammaFunction.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "gamma is the Euler-Mascheroni constant"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/EulerGamma.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/Euler-MascheroniConstant.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "4", "datatypes" -> "Sum", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.5310000000000001", "parsetiming" -> "0.786", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP54831c81513ad4ic97fb000014920g848218ddcb", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "7", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa54841c81513ad4ic97fb000032i9ca3i6019ffd76249686130609588165", "version" -> 
    "2.6", "inputstring" -> "sum of 1/p(p+1) from 1 to n"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2022, 11, 23, 11, 39, 45.0970055`9.406722571536282}, "Line" -> 
    368, "SessionID" -> 16943083377698340012}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "sum of 1/p(p+1) from 1 to n"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1070., {469.3544921875, 474.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8782103851674824`*^9},ExpressionUUID->"dc3da5a7-af6d-494c-b343-\
37992384ab48"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ForAll", "[", 
  RowBox[{"x", ","}], "]"}]], "Input",
 CellChangeTimes->{{3.878210289003334*^9, 
  3.878210324456269*^9}},ExpressionUUID->"5a7e93b2-e0cc-441e-bf30-\
7847bfa996af"]
}, Open  ]]
},
WindowSize->{1141.2, 579.6},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.2 for Microsoft Windows (64-bit) (November 18, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"e332060b-7a4c-4bbd-ac5b-5619ca4cfb41"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 158, 3, 67, "Section",ExpressionUUID->"d55f3321-3431-404e-980c-cae7e1c8aa0f"],
Cell[CellGroupData[{
Cell[763, 29, 207, 4, 28, "Input",ExpressionUUID->"340099e7-9e6f-4de2-82e4-2cf31c8b321f"],
Cell[973, 35, 184, 4, 32, "Output",ExpressionUUID->"65d0adde-ec5e-4cca-b6c1-fb869b59e72a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1194, 44, 423, 12, 28, "Input",ExpressionUUID->"8ca22725-9480-43ce-910a-f61b5fd71cbe"],
Cell[1620, 58, 428, 14, 49, "Output",ExpressionUUID->"46c09bd2-0a81-4f60-9b84-c35faa98ba5b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2085, 77, 475, 13, 28, "Input",ExpressionUUID->"7d26bef2-e6ed-414f-a4ae-a34c62b8b6ed"],
Cell[2563, 92, 3680, 104, 316, "Output",ExpressionUUID->"2505ae9b-3fb9-4124-9c7b-c66c9272d564"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6292, 202, 156, 3, 67, "Section",ExpressionUUID->"99b8de2c-0043-47b8-a671-b405257db7f2"],
Cell[CellGroupData[{
Cell[6473, 209, 515, 14, 28, "Input",ExpressionUUID->"f76dfbf8-748a-4ed3-883f-2e7679b5ada5"],
Cell[6991, 225, 1750, 34, 166, "Output",ExpressionUUID->"f892120c-d95c-41cf-8768-8a08bae0f630"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8778, 264, 520, 14, 28, "Input",ExpressionUUID->"a79e398d-cb3d-4e2c-9ac5-e18b1a9e8497"],
Cell[9301, 280, 401, 13, 32, "Output",ExpressionUUID->"655dabd2-5d15-421a-a155-43d4e6780eda"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9739, 298, 555, 15, 28, "Input",ExpressionUUID->"b8b69944-07fd-4a01-b64b-441ce02ec137"],
Cell[10297, 315, 371, 12, 32, "Output",ExpressionUUID->"af78a5ec-75b7-4854-bc1e-1fe4670ba28e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10705, 332, 396, 13, 31, "Input",ExpressionUUID->"c74518e6-27dd-4337-acae-b00c7768555d"],
Cell[11104, 347, 298, 9, 32, "Output",ExpressionUUID->"92a656ec-d9c6-4cde-924a-417e7b8c750e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11439, 361, 195, 3, 41, "WolframAlphaLong",ExpressionUUID->"e2fd9df6-8c06-47ed-a4b7-40876d78e6a7"],
Cell[11637, 366, 144886, 2805, 1520, "Print",ExpressionUUID->"95a7851b-7858-49cc-b44c-71cdfbb5874c"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[156572, 3177, 160, 3, 67, "Section",ExpressionUUID->"9ea9ecd1-a9bb-446b-b4c9-33b93b05601a"],
Cell[CellGroupData[{
Cell[156757, 3184, 466, 13, 28, "Input",ExpressionUUID->"fd5943db-bd86-4cb6-bc32-4bfb75a6c745"],
Cell[157226, 3199, 1586, 44, 57, "Output",ExpressionUUID->"8bdcb7e1-45f5-485a-9e25-0dfdefff4a2d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158849, 3248, 522, 14, 28, "Input",ExpressionUUID->"93bb6c5f-490a-411c-be19-a9042acb6ca5"],
Cell[159374, 3264, 197, 5, 32, "Output",ExpressionUUID->"daa98592-0a3f-44f9-ae62-68044a340db7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[159608, 3274, 608, 16, 28, "Input",ExpressionUUID->"0811fb1d-9452-46af-9b9e-d89e9b5f1774"],
Cell[160219, 3292, 178, 4, 32, "Output",ExpressionUUID->"4046b239-ce9b-4ab9-a3c1-c1c7f38cd5ae"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[160446, 3302, 159, 3, 67, "Section",ExpressionUUID->"51d47107-1168-4681-bd23-18729b1da737"],
Cell[CellGroupData[{
Cell[160630, 3309, 416, 12, 46, "Input",ExpressionUUID->"25126f07-645b-46c5-ac77-166b676b598d"],
Cell[161049, 3323, 371, 11, 32, "Output",ExpressionUUID->"26d4f898-87f0-4163-98d4-bb3a8090fb18"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161457, 3339, 412, 12, 46, "Input",ExpressionUUID->"cebd88ee-7852-48d0-bb02-9c9d9a3a68c2"],
Cell[161872, 3353, 351, 11, 32, "Output",ExpressionUUID->"1d72748f-5c9a-4cfd-b644-dc67c6619b6e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[162260, 3369, 541, 16, 46, "Input",ExpressionUUID->"d72bdc7e-e072-44e6-ac46-0688a13e2142"],
Cell[162804, 3387, 1683, 54, 87, "Output",ExpressionUUID->"972c9547-ffff-4019-9195-a51bbee25a98"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164524, 3446, 424, 12, 28, "Input",ExpressionUUID->"73aa890b-e5c1-478f-934e-1181d2d64f8b"],
Cell[164951, 3460, 1661, 54, 87, "Output",ExpressionUUID->"291ba2c5-7708-4197-a652-77d50d7fef1f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166649, 3519, 756, 22, 46, "Input",ExpressionUUID->"f40d295d-e0b1-4db7-a39e-3f0f6ae85887"],
Cell[167408, 3543, 207, 4, 32, "Output",ExpressionUUID->"11bd643a-d96a-4e7a-a5b4-3a8c19ee1fb2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167652, 3552, 415, 12, 46, "Input",ExpressionUUID->"2e03baad-c059-45d6-b62b-06fb87e59d9a"],
Cell[168070, 3566, 405, 14, 46, "Output",ExpressionUUID->"df799c68-bd50-4adc-9f24-f08d7837a499"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168512, 3585, 527, 15, 41, "WolframAlphaLong",ExpressionUUID->"12d63906-3ad0-4f91-a7c1-9906762ce899"],
Cell[169042, 3602, 58331, 1214, 977, "Print",ExpressionUUID->"8fa57604-0182-4d1b-add2-02a187a0cad7"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[227422, 4822, 175, 3, 67, "Section",ExpressionUUID->"e1800fed-50a5-4019-8363-b98847989964"],
Cell[CellGroupData[{
Cell[227622, 4829, 298, 10, 46, "Input",ExpressionUUID->"36a61d6d-7e0f-434f-9edf-f67f69776974"],
Cell[227923, 4841, 349, 11, 32, "Output",ExpressionUUID->"e7fc63f2-ab23-4e4d-815c-e2487b8f27e5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[228309, 4857, 432, 13, 46, "Input",ExpressionUUID->"bf9f45e1-8552-43c5-b743-ce6b01a1b817"],
Cell[228744, 4872, 365, 11, 32, "Output",ExpressionUUID->"7ea207a9-7cfa-4afd-81f1-70aa25f789a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229146, 4888, 443, 14, 46, "Input",ExpressionUUID->"20539f05-c111-4b40-b992-d8809b2466a5"],
Cell[229592, 4904, 372, 11, 32, "Output",ExpressionUUID->"ce276b26-c35d-4d10-b1d6-0dfba21db30f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230001, 4920, 519, 16, 46, "Input",ExpressionUUID->"878f66d0-2b40-4900-a080-4c8767fdb686"],
Cell[230523, 4938, 363, 11, 32, "Output",ExpressionUUID->"c3f7e261-1961-4378-b1e6-dd215815e5d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230923, 4954, 520, 17, 48, "Input",ExpressionUUID->"c7daa10d-f788-459e-8270-cdc31614c98e"],
Cell[231446, 4973, 423, 14, 32, "Output",ExpressionUUID->"0f40b4d2-5a66-4773-bba3-0f150f670fa8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231906, 4992, 812, 27, 51, "Input",ExpressionUUID->"a114520b-ab10-4429-b5d4-853399490da4"],
Cell[232721, 5021, 707, 23, 32, "Output",ExpressionUUID->"df64fb77-649c-4581-9469-f2fe0587138a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[233465, 5049, 848, 27, 31, "Input",ExpressionUUID->"9fcb1c60-f023-4d19-8d7b-98ca98f77a88"],
Cell[234316, 5078, 533, 11, 28, "Message",ExpressionUUID->"5adea467-35a2-4a1c-92b8-d4be7eeb60b9"],
Cell[234852, 5091, 213, 4, 32, "Output",ExpressionUUID->"03cfac94-0bb4-46be-9aad-1c7911cdf412"]
}, Open  ]],
Cell[CellGroupData[{
Cell[235102, 5100, 826, 25, 31, "Input",ExpressionUUID->"5bfce387-7934-47eb-8680-1cdb6c08bdc5"],
Cell[235931, 5127, 185, 4, 32, "Output",ExpressionUUID->"308d93d8-d509-4fb2-a123-6d60b7278452"]
}, Open  ]],
Cell[CellGroupData[{
Cell[236153, 5136, 753, 24, 28, "Input",ExpressionUUID->"345be8ed-346b-4492-878a-3668bf4047a2"],
Cell[236909, 5162, 155, 3, 32, "Output",ExpressionUUID->"955d61c3-f90c-470c-a63d-110a44bca629"]
}, Open  ]],
Cell[CellGroupData[{
Cell[237101, 5170, 716, 23, 28, "Input",ExpressionUUID->"7a74c297-428b-47b6-9f6c-d9f1f639c584"],
Cell[237820, 5195, 179, 3, 32, "Output",ExpressionUUID->"10c8d4e8-619e-4cf1-8086-202682ec6ad3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[238036, 5203, 465, 14, 28, "Input",ExpressionUUID->"d407d215-697b-46e0-b9e5-55550c847a5a"],
Cell[238504, 5219, 354, 11, 32, "Output",ExpressionUUID->"4f706489-2c96-4966-a2fe-2c769dc22216"]
}, Open  ]],
Cell[CellGroupData[{
Cell[238895, 5235, 239, 5, 28, "Input",ExpressionUUID->"6f648dac-0732-493e-8c18-b98497ca0fcc"],
Cell[239137, 5242, 435, 13, 32, "Output",ExpressionUUID->"439c0021-6f07-4e97-8ae5-06e051f8bf9f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239609, 5260, 272, 6, 28, "Input",ExpressionUUID->"d238edea-d820-47ab-9cbc-745ee9bb40e5"],
Cell[239884, 5268, 648, 22, 32, "Output",ExpressionUUID->"52f1b747-5ec4-430a-98a2-63feb1347694"]
}, Open  ]],
Cell[CellGroupData[{
Cell[240569, 5295, 312, 8, 28, "Input",ExpressionUUID->"3620f066-2d1c-4265-880c-54133962bd95"],
Cell[240884, 5305, 410, 13, 32, "Output",ExpressionUUID->"6b6b2adb-b840-4cd2-8b89-6be2fa8d282b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[241331, 5323, 312, 8, 28, "Input",ExpressionUUID->"c4149b82-9c75-4095-9c36-bdfaca701ed9"],
Cell[241646, 5333, 433, 14, 32, "Output",ExpressionUUID->"648239d8-0910-4a01-b558-ecce94f2c650"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[242128, 5353, 150, 3, 67, "Section",ExpressionUUID->"e7e15287-67a0-4ccc-aeb4-ed8b119918e8"],
Cell[CellGroupData[{
Cell[242303, 5360, 292, 7, 28, "Input",ExpressionUUID->"a57fafcb-8c51-418f-909f-880c5fcde57f"],
Cell[242598, 5369, 492, 9, 32, "Output",ExpressionUUID->"cd33bfb9-2d6c-4442-88bf-8ed3121feb00"]
}, Open  ]],
Cell[CellGroupData[{
Cell[243127, 5383, 815, 22, 28, "Input",ExpressionUUID->"deb144fa-a79f-42bb-b0e1-ff3183e72aff"],
Cell[243945, 5407, 10940, 439, 443, "Output",ExpressionUUID->"d5eff7ad-f2f0-4c63-b58a-dfdb12e8e4f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[254922, 5851, 371, 11, 48, "Input",ExpressionUUID->"acb3c9b9-f40f-4d38-b955-a6b74e60c2e9"],
Cell[255296, 5864, 220, 6, 51, "Output",ExpressionUUID->"6667b17f-cf58-4bf2-bd05-2b2c64b83289"]
}, Open  ]],
Cell[CellGroupData[{
Cell[255553, 5875, 495, 15, 48, "Input",ExpressionUUID->"a642aa1b-d4eb-4194-966f-0728d8390395"],
Cell[256051, 5892, 158, 3, 32, "Output",ExpressionUUID->"5aa676de-dd05-43d0-97ba-19d11aa7be2c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[256246, 5900, 206, 3, 41, "WolframAlphaLong",ExpressionUUID->"6ad37d71-dd2d-415b-8fbb-48921c844918"],
Cell[256455, 5905, 22789, 459, 954, "Print",ExpressionUUID->"dc3da5a7-af6d-494c-b343-37992384ab48"]
}, Open  ]],
Cell[279259, 6367, 203, 5, 28, "Input",ExpressionUUID->"5a7e93b2-e0cc-441e-bf30-7847bfa996af"]
}, Open  ]]
}
]
*)

