(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    562416,      11264]
NotebookOptionsPosition[    549166,      11021]
NotebookOutlinePosition[    549645,      11039]
CellTagsIndexPosition[    549602,      11036]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  SubscriptBox["\[ForAll]", 
   RowBox[{"x", ",", 
    RowBox[{"x", "\[Element]", "Reals"}]}]], 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "2"], "+", "1"}], ">=", "1"}]}]], "Input",
 CellChangeTimes->{{3.8715584512784777`*^9, 3.8715584610642853`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"4d530e1c-2878-437b-b625-c4bbd5189eb3"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[ForAll]", 
   RowBox[{"x", ",", 
    RowBox[{"x", "\[Element]", 
     TemplateBox[{},
      "Reals"]}]}]], 
  RowBox[{
   RowBox[{"1", "+", 
    SuperscriptBox["x", "2"]}], "\[GreaterEqual]", "1"}]}]], "Output",
 CellChangeTimes->{3.8715584615160446`*^9, 3.8716722725396757`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"988d37ec-a73e-490d-b94e-7dfaebb75cf9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Resolve", "[", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"x", ",", 
     RowBox[{"x", "\[Element]", 
      TemplateBox[{},
       "Reals"]}]}]], 
   RowBox[{
    RowBox[{"1", "+", 
     SuperscriptBox["x", "2"]}], "\[GreaterEqual]", "1"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[2]:=",ExpressionUUID->"5e6ecac5-be89-422a-9e22-d5d06a215d21"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8715584631731186`*^9, 3.8716722734274235`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"f6a5dd1f-e368-4eb7-99bb-3488948c0d8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Resolve", "[", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"x", ",", 
     RowBox[{"x", "\[Element]", "PositiveIntegers"}]}]], 
   RowBox[{
    RadicalBox["x", "3"], "\[NotElement]", "Rationals"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8715584726181216`*^9, 3.871558493233994*^9}, {
  3.871558576087574*^9, 3.871558584876842*^9}, {3.8715588385189877`*^9, 
  3.8715588755757523`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"7781d084-c5e4-45b5-b781-aa5e441b269f"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[ForAll]", 
   RowBox[{
    RowBox[{"{", "x", "}"}], ",", 
    RowBox[{
     RowBox[{"x", "\[Element]", 
      TemplateBox[{},
       "Integers"]}], "&&", 
     RowBox[{"x", ">", "0"}]}]}]], 
  RowBox[{
   SuperscriptBox["x", 
    RowBox[{"1", "/", "3"}]], "\[NotElement]", 
   TemplateBox[{},
    "Rationals"]}]}]], "Output",
 CellChangeTimes->{3.8715588759013186`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"a4f4c10c-5eb5-4c08-abd0-bdcad892690f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Resolve", "[", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{
     RowBox[{"{", "x", "}"}], ",", 
     RowBox[{
      RowBox[{"x", "\[Element]", 
       TemplateBox[{},
        "Integers"]}], "&&", 
      RowBox[{"x", ">", "0"}]}]}]], 
   RowBox[{
    SuperscriptBox["x", 
     RowBox[{"1", "/", "3"}]], "\[NotElement]", 
    TemplateBox[{},
     "Rationals"]}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[5]:=",ExpressionUUID->"116cb967-626f-4fb1-9d72-9315686a0d4d"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[ForAll]", 
   RowBox[{
    RowBox[{"{", "x", "}"}], ",", 
    RowBox[{
     RowBox[{"x", "\[Element]", 
      TemplateBox[{},
       "Integers"]}], "&&", 
     RowBox[{"x", ">", "0"}]}]}]], 
  RowBox[{
   SuperscriptBox["x", 
    RowBox[{"1", "/", "3"}]], "\[NotElement]", 
   TemplateBox[{},
    "Rationals"]}]}]], "Output",
 CellChangeTimes->{3.8715588785705605`*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"10bb27f2-522b-4841-a25a-4ee89cb24bd8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Resolve", "[", 
  RowBox[{"\[Not]", 
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["\[ForAll]", 
      RowBox[{
       RowBox[{"{", "x", "}"}], ",", 
       RowBox[{
        RowBox[{"x", "\[Element]", 
         TemplateBox[{},
          "Integers"]}], "&&", 
        RowBox[{"x", ">", "0"}]}]}]], 
     RowBox[{
      SuperscriptBox["x", 
       RowBox[{"1", "/", "3"}]], "\[NotElement]", 
      TemplateBox[{},
       "Rationals"]}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8715588880497785`*^9, 3.871558896367879*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"bde8463c-ff93-4f92-8b19-d77fad9ff07a"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[Exists]", 
   RowBox[{
    RowBox[{"{", "x", "}"}], ",", 
    RowBox[{
     RowBox[{"x", "\[Element]", 
      TemplateBox[{},
       "Integers"]}], "&&", 
     RowBox[{"x", ">", "0"}]}]}]], 
  RowBox[{
   SuperscriptBox["x", 
    RowBox[{"1", "/", "3"}]], "\[Element]", 
   TemplateBox[{},
    "Rationals"]}]}]], "Output",
 CellChangeTimes->{3.871558896888256*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"a679497e-441d-416d-a06b-78fa26ef62bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindInstance", "[", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[Exists]", 
     RowBox[{
      RowBox[{"{", "x", "}"}], ",", 
      RowBox[{
       RowBox[{"x", "\[Element]", 
        TemplateBox[{},
         "Integers"]}], "&&", 
       RowBox[{"x", ">", "0"}]}]}]], 
    RowBox[{
     SuperscriptBox["x", 
      RowBox[{"1", "/", "3"}]], "\[Element]", 
     TemplateBox[{},
      "Rationals"]}]}], ",", 
   RowBox[{"{", "x", "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[7]:=",ExpressionUUID->"edea7b5e-67ff-4fc4-b44a-ed75c7c03f1b"],

Cell[BoxData[
 TemplateBox[{
  "FindInstance", "nsmet", 
   "\"The methods available to FindInstance are insufficient to find the \
requested instances or prove they do not exist.\"", 2, 7, 2, 
   19475768893721818344, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8715588991140385`*^9},
 CellLabel->
  "During evaluation of \
In[7]:=",ExpressionUUID->"145335df-406e-411e-81c7-a1ce55ead71d"],

Cell[BoxData[
 RowBox[{"FindInstance", "[", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[Exists]", 
     RowBox[{
      RowBox[{"{", "x", "}"}], ",", 
      RowBox[{
       RowBox[{"x", "\[Element]", 
        TemplateBox[{},
         "Integers"]}], "&&", 
       RowBox[{"x", ">", "0"}]}]}]], 
    RowBox[{
     SuperscriptBox["x", 
      RowBox[{"1", "/", "3"}]], "\[Element]", 
     TemplateBox[{},
      "Rationals"]}]}], ",", 
   RowBox[{"{", "x", "}"}]}], "]"}]], "Output",
 CellChangeTimes->{3.871558899154043*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"3eb53b43-f1c1-4808-8038-5269c730719b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"1", "+", 
    SuperscriptBox["x", "2"]}], "\[GreaterEqual]", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.8715611357887306`*^9, 3.8715611373057575`*^9}, {
  3.871672387415017*^9, 3.8716723938506274`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"7e37bca1-b651-427f-b84d-576b4e44bd91"],

Cell[BoxData[
 RowBox[{"x", "\[Element]", 
  TemplateBox[{},
   "Reals"]}]], "Output",
 CellChangeTimes->{3.8716723943473845`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"8c652780-cb25-4d20-abec-35ccaf271d0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindInstance", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1", "+", 
     SuperscriptBox["x", "2"]}], "<", "1"}], ",", "x", ",", "Complexes"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.871672403407893*^9, 3.871672413573977*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"44858ccf-63c3-4773-a364-b28ceb42da6f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{"-", "\[ImaginaryI]"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.871672413926568*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"563fe080-51ab-4d78-ad42-7fa48f459bbc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"1", "+", 
    SuperscriptBox["x", "2"]}], "<", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.871672421079793*^9, 3.871672427333865*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"f5f1fb08-fdc3-43a0-9544-833e7bb3a0c2"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.871672427687336*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"d1436dee-037d-4882-9185-ac15c8fe313c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1", "+", 
     SuperscriptBox["x", "2"]}], "<", "1"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.871672421079793*^9, 3.8716724311262026`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"938ec012-54d7-4e29-a408-8b8ff1c7ba7e"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.871672431441353*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"e165d6a6-13f5-47ac-a193-b2b354ac10a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"1", "+", 
     SuperscriptBox["x", "2"]}], "<", "1"}], ",", "x", ",", "Complexes"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.871672421079793*^9, 3.871672434164116*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"ad0dda36-999a-4b6e-babb-e2374a945a85"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Re", "[", "x", "]"}], "\[Equal]", "0"}], "&&", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"Im", "[", "x", "]"}], "<", "0"}], "||", 
    RowBox[{
     RowBox[{"Im", "[", "x", "]"}], ">", "0"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.8716724350462894`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"51874a7b-3c11-42dc-9eff-999e1e042e9b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"2", "x"}], "+", "4"}], "==", "0"}], "]"}]], "Input",
 CellChangeTimes->{{3.8716726687408113`*^9, 3.871672674724733*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"6b1051fd-0190-4878-b97f-932ace55601e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "1"}], "-", 
      RowBox[{"\[ImaginaryI]", " ", 
       SqrtBox["3"]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", "\[Rule]", 
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"\[ImaginaryI]", " ", 
       SqrtBox["3"]}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8716726751273193`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"1a6761e3-e3f4-43f9-b552-b21413f4a0a0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem 2", "Section",
 CellChangeTimes->{{3.871672800111627*^9, 
  3.8716728012756433`*^9}},ExpressionUUID->"ff0715d7-d4dc-49f2-ae10-\
46d6f0656e2c"],

Cell[CellGroupData[{

Cell["Subproblem 1", "Subsection",
 CellChangeTimes->{{3.871672804582337*^9, 
  3.8716728075456133`*^9}},ExpressionUUID->"b011fb71-d2df-4796-b805-\
9d0d3182baa0"],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox["x", "2"], "+", 
   RowBox[{"2", "x"}], "+", "4"}], TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"249d57ed-f300-4ffd-b50b-c7c830adf832"]], \
"WolframAlphaLong",
 CellChangeTimes->{{3.871672810066868*^9, 3.8716728147976065`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"0ac9d2fe-0141-4509-8f55-3b8f7002cf62"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "x^2 + 2 x + 4", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {
     "ComplexSolution__Trigonometric form", 
      "ComplexSolution__Exponential form", 
      "ComplexSolution__Step-by-step solution", "ComplexSolution__Hide steps",
       "ComplexSolution__Hide steps", "ComplexSolution__Trigonometric form"}},
    Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"x^2 + 2 x + 4"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox["x", "2"], "+", 
               RowBox[{"2", " ", "x"}], "+", "4"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[4 + 2 x + x^2, {x, -2.8, 0.83}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1479$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1478$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1478$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1479$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1820598$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1478$\
1820603$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1479$1820604$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1479$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1478$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1820598$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1478$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1478$\
1820603$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1479$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1479$\
1820604$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1820575[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    4 + 2 $CellContext`x + $CellContext`x^2, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1478$$], 
                    (
                    Piecewise[{{-1. + 
                    1.9595917942265424` Tan[1.5040801783846716` #], # < 
                    0}}, -1. + 
                    1.9595917942265424` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1478$$], \
-2.833030277982336], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1478$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1479$$]], 
                    (
                    Piecewise[{{-1. + 
                    1.9595917942265424` Tan[1.5040801783846716` #], # < 
                    0}}, -1. + 
                    1.9595917942265424` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1478$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1479$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1478$$ + 
                    0.0036660605559646724`, 
                    CalculateUtilities`GraphicsUtilities`Private`max1479$$]], 
                    0.8330302779823362]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1478$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1479$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1820575]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1820575[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1820575[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiM2ACxL0hAB2PSgJKU7/\
XiS2rh2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozlLNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoR48+\
v8H3Ck4ITA18N48ww0JM9RfIpS3TtGSl2ZH8y4TIhnP2Ex1s7209f7Lz0MBjLiBgDSuhnbSHzqSIa0\
h4CXbHmLSfimz8+KI+fCs5j+\
F6ASEDfs96xItTCSEE45hN868Vm6jYmZoigRNFzp8nJc9j2Am0UE9kYZjm+cTZZW22Bicq05+\
ZOyc06Bfnwr+MDGbuYvMcl7c6OwLAwLhh9p2X1z7kb4Pl1W3glj1cTh/\
m94cgbMewI9DKdT1rXyTNSda2Lfs7Vec2XjQZ59pSp/5cOmDbLYWy3DQNmh7bGq7W3DP+\
8LbzMsevn4r5rzWfvKAFXDYdKcB8lLfg8imbKAy/R9unq3Do8xq2K7xidIRWscCIbZ9kvrj/uV+\
D1phBj7SYbkI6oZ0AEOVgXddzusoyZ4ZQokljg+XX9ssnGsg4l4M72tWeCMjvAPCHrlic0++\
lC3YlJpl/+qLiVXE41GfK+LwxkoNaK/gbWR1lyBR3LwEhivKCp12AOq6RGRAXLflCCxDkRDCHZL/\
tx3/zDxUogVXsK1aU8iwNXmpPwJPplgQ9AZGba3LEDR1dw22I2kTyuVRexNF2cNptjut9kunFDc6CH\
khBakvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AcuouJY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[4 + 2 x + x^2, {x, -13., 11.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max1481$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min1480$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1480$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1481$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1820695$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min1480$\
1820696$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max1481$1820697$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max1481$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min1480$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1820695$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min1480$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min1480$\
1820696$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max1481$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max1481$\
1820697$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1820674[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    4 + 2 $CellContext`x + $CellContext`x^2, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1480$$], 
                    (
                    Piecewise[{{-1. + 
                    12.82853961179637 Tan[1.5040801783846716` #], # < 
                    0}}, -1. + 
                    12.82853961179637 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min1480$$], \
-13.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min1480$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max1481$$]], 
                    (
                    Piecewise[{{-1. + 
                    12.82853961179637 Tan[1.5040801783846716` #], # < 
                    0}}, -1. + 
                    12.82853961179637 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min1480$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max1481$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min1480$$ + 
                    0.024, CalculateUtilities`GraphicsUtilities`Private`\
max1481$$]], 11.]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min1480$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max1481$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1820674]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1820674[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1820674[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiM2JjQviABHYxJA0pSvvcWO42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0ht4emzNUM5yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Ct8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJn27tbj9/\
ubvjYTCWERhDldAv2kLmmQJN0x4CXbPmLQfxzR8flcdPBecx/V5QkVD9wHrHCoiFkQI45hN86+\
Vm6i4mZkAQUOTCaXLyHLa9QBvFxHRMZzm+cT5ZW22BQU215+Zeyc06Bfnwb+\
IDGbuYvMcl7c6OwLAwLhl9Z2X1z7kb4Pl1W3glT1YTh/\
m94cgbGHZM9TKdz1rXyTNSda2Lfs7VRc2XjQZ5/pSp/\
5cOmTbLYWy3DYPOjmyNV2tvGX6nLbzMsevn4r5vzWfvKAFXDYdKcB8lKfg8imbKAy/\
R9unq3Do8xp2K7xidIRWscCIbZ9kvrj8eVuD1phBj7SYbkI6oZ0BEc2pdxHG7x6bMDDNQkFjg+\
XX9ssnGsg4l4M72tWeCMDvAPCHrlic0B+lC3cEk2Zc/Km4llzNNhrwfCEOnVK0V/\
S2sj7LkCjKWgZHEeEFTr8EcVkmNQAXLflCCxDkIhpDsl/24b/\
7hYiWQqn2F6lKexYErzWl4Ev2ywIdUTE3W3LEDR1dw22I2kTypVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AdgjuIY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Geometric figure", "scanner" -> "Geometry", "id" -> 
     "GeometricFigure (ofBoundary)", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox["\"parabola\"", 
              $CellContext`TagBoxWrapper[
              "Entity" -> {$CellContext`GeometryData, "Parabola"}]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Properties", "input" -> 
         "GeometricFigure (ofBoundary)__Properties"}, {}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"FullSimplify[4 + 2 x + x^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"x", " ", 
                 RowBox[{"(", 
                   RowBox[{"x", "+", "2"}], ")"}]}], "+", "4"}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{"x", "+", "1"}], ")"}], "2"], "+", "3"}], Identity],
             TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Factor[4 + 2 x + x^2, Extension -> {I Sqrt[3]}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"(", 
                 RowBox[{
                   RowBox[{"-", 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]"}], " ", "x"}]}], "+", 
                   SqrtBox["3"], "-", 
                   TagBox["\[ImaginaryI]", HoldForm]}], ")"}], " ", 
               RowBox[{"(", 
                 RowBox[{
                   RowBox[{"\[ImaginaryI]", " ", "x"}], "+", 
                   SqrtBox["3"], "+", 
                   TagBox["\[ImaginaryI]", HoldForm]}], ")"}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Complex roots", "scanner" -> "Reduce", "id" -> 
     "ComplexSolution", "position" -> "100", "error" -> "false", "numsubpods" -> 
     "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Simplify[Select[Solve[4 + 2 x + x^2 == 0, x],  !Element[x /. #1, \
Reals] & ]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", 
              RowBox[{"2", " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{
                    
                    TemplateBox[{"cos"}, "InactiveHead", BaseStyle -> 
                    "InactiveTraditional", Tooltip -> "Inactive[Cos]", 
                    SyntaxForm -> "Symbol", InterpretationFunction -> None], 
                    "(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]"}], "3"]}], ")"}], 
                    TagBox[
                    "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                    SyntaxForm -> "+"], 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    
                    TemplateBox[{"sin"}, "InactiveHead", BaseStyle -> 
                    "InactiveTraditional", Tooltip -> "Inactive[Sin]", 
                    SyntaxForm -> "Symbol", InterpretationFunction -> None], 
                    "(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]"}], "3"]}], ")"}]}]}], ")"}]}]}],
             TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Simplify[Select[Solve[4 + 2 x + x^2 == 0, x],  !Element[x /. #1, \
Reals] & ]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"x", "\[LongEqual]", 
              RowBox[{"2", " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{
                    
                    TemplateBox[{"cos"}, "InactiveHead", BaseStyle -> 
                    "InactiveTraditional", Tooltip -> "Inactive[Cos]", 
                    SyntaxForm -> "Symbol", InterpretationFunction -> None], 
                    "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]"}], "3"], ")"}], 
                    TagBox[
                    "+", "InactiveToken", BaseStyle -> "InactiveTraditional", 
                    SyntaxForm -> "+"], 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    
                    TemplateBox[{"sin"}, "InactiveHead", BaseStyle -> 
                    "InactiveTraditional", Tooltip -> "Inactive[Sin]", 
                    SyntaxForm -> "Symbol", InterpretationFunction -> None], 
                    "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]"}], "3"], ")"}]}]}], ")"}]}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "statelist", {
        "count" -> "3", "value" -> "Trigonometric form", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Cartesian form", "input" -> 
           "ComplexSolution__Cartesian form"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Trigonometric form", "input" -> 
           "ComplexSolution__Trigonometric form"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Exponential form", "input" -> 
           "ComplexSolution__Exponential form"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "ComplexSolution__Approximate forms"}, {}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Roots in the complex plane", "scanner" -> "Reduce", 
     "id" -> "RootsInTheComplexPlane", "position" -> "600", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[{{
               GrayLevel[0.8], 
               AbsoluteThickness[1], 
               CircleBox[{0, 0}, 2.], 
               
               LineBox[{{{0, 0}, {-1., -1.7320508075688772`}}, {{0, 0}, {-1., 
                  1.7320508075688772`}}}]}, {
               RGBColor[1, 0, 0], 
               PointSize[Medium], 
               
               PointBox[{{-1., -1.7320508075688772`}, {-1., 
                1.7320508075688772`}}]}}, {GridLines -> Dynamic[
                Map[{{#, 
                   GrayLevel[0.7]}}& , 
                 MousePosition[{"Graphics", Graphics}, None]]], 
              Method -> {"GridLinesInFront" -> True}, Epilog -> {
                DynamicBox[
                 Typeset`ToBoxes[
                  
                  DynamicModule[{
                   CalculateUtilities`GraphicsUtilities`Private`pt = (
                    NearestFunction[
                    Hold[
                    
                    Nearest[{{-0.3846153846153847, -0.3765327842541038}, \
{-0.3846153846153847, 
                    0.3765327842541038}} -> {{-1., -1.7320508075688772`}, \
{-1., 1.7320508075688772`}}]]][#/{2.5999999999999996`, 4.6}]& )[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                   If[
                   CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    (
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]][#,
                     2]& )[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[
                    Part[CalculateUtilities`GraphicsUtilities`Private`scaled, 
                    1] - 0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt]}]],
                   TraditionalForm, Graphics]]}, PlotRangePadding -> 0, 
              PlotRangeClipping -> True, 
              PlotRange -> {{-2.3, 0.3}, {-2.3, 2.3}}, Frame -> True, 
              FrameTicks -> Automatic, FrameStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], ImageSize -> {{264.}, {264.}}, AspectRatio -> Automatic, 
              Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> Directive[
                GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], AxesLabel -> {
                FormBox["\"Re(x)\"", TraditionalForm], 
                FormBox["\"Im(x)\"", TraditionalForm]}, FrameLabel -> None, 
              RotateLabel -> False}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Polynomial discriminant", "scanner" -> "Expression", 
     "id" -> "PolynomialDiscriminant", "position" -> "700", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Discriminant[4 + 2 x + x^2, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"\[CapitalDelta]", "\[LongEqual]", 
              RowBox[{"-", "12"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show class number", "input" -> 
         "PolynomialDiscriminant__Show class number"}, {}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "800", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[x^2 + 2 x + 4, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{}, "Reals"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all real numbers\"", "\[NoBreak]", 
                  "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["minput", {}, {"FunctionRange[x^2 + 2 x + 4, x, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"y", "\[Element]", 
                TemplateBox[{}, "Reals"]}], "\" : \"", 
              RowBox[{"y", "\[GreaterEqual]", "3"}], "\"}\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod9$$ = 
   XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "900", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[4 + 2 x + x^2, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    RowBox[{"2", " ", "x"}], "+", "4"}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"2", " ", 
                 RowBox[{"(", 
                   RowBox[{"x", "+", "1"}], ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[x^2 + 2 x + 4, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    RowBox[{"2", " ", "x"}], "+", "4"}], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox[
                    SuperscriptBox["x", "3"], "3"], "+", 
                    SuperscriptBox["x", "2"], "+", 
                    RowBox[{"4", " ", "x"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Global minimum", "scanner" -> "GlobalExtrema", "id" -> 
     "GlobalMinimum", "position" -> "1100", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Minimize[x^2 + 2 x + 4, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"min", "\[NoBreak]", 
                  RowBox[{"{", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    RowBox[{"2", " ", "x"}], "+", "4"}], HoldForm], "}"}]}], 
                "\[LongEqual]", "3"}], 
              StyleBox["\" at \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{
                TagBox["x", HoldForm], "\[LongEqual]", 
                RowBox[{"-", "1"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "GlobalMinimum__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1200", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, 
                 CalculateScan`PlotterScanner`Private`involutesRightTF$$ = 
                 True, CalculateScan`PlotterScanner`Private`involuteTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
involuteThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.1697869262627728, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.1697869262627728, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, 
                 CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.1697869262627728, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.1697869262627728, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.1697869262627728, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.8876096138820735, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.657067490728967, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.8876096138820735, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.657067490728967, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.1697869262627728, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.1697869262627728, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.1697869262627728, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.1697869262627728, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.1697869262627728, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2517506$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$2517511$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$2517512$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$2517513$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$2517514$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$2517515$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$2517516$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$2517517$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$2517518$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$2517519$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
2517520$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
2517521$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$2517522$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$2517523$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.1697869262627728, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.1697869262627728, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.1697869262627728, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.1697869262627728, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.1697869262627728, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.8876096138820735, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.657067490728967}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2517506$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$2517511$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$2517512$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$2517513$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$2517514$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$2517515$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$2517516$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$2517517$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$2517518$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$2517519$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
2517520$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
2517521$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
2517522$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$2517523$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    11.666060555964672`/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    5.833030277982336], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    5.833030277982336]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[1/(4 + 2 $CellContext`x + $CellContext`x^2) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`x < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`x,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    5.833030277982336]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    5.833030277982336], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 5.833030277982336], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{2, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 2], 
                    Evaluate]}, {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{2, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 2], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{2, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 2], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x], 1} (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {2, 0, 0}}, {{2, {2, 0, 0}}}, {
                    0, 1, 1, 0, 0}, {{1}}, 
                    Function[{$CellContext`x}, 2], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`x] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/(4 + 2 $CellContext`x + $CellContext`x^2) == 
                    0, $CellContext`x, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
x] == Sqrt[1 + D[4 + 2 $CellContext`x + $CellContext`x^2, $CellContext`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]}], $CellContext`x], \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 5.833030277982336]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x], 
                    1}], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 5.833030277982336], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x], 
                    1}]], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]) - ((
                    
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x], 1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], 
                    Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$]^2) (
                    1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    3}}, {{4, {2, 0, 0}}, {2, {2, 0, 1}}}, {0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {40, 56, 3, 0, 0, 3, 0, 
                    2}, {10, 0, 3}, {13, 3, 1, 2, 3}, {1}}, 
                    
                    Function[{$CellContext`x}, 4 + 
                    2 $CellContext`x + $CellContext`x^2], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 2}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {1}}, 
                    Function[{$CellContext`x}, 2 + 2 $CellContext`x], 
                    Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    RowBox[{"2", " ", "x"}], "+", "4"}], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.8876096138820735, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.657067490728967, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.1697869262627728, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.1697869262627728, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.1697869262627728, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.1697869262627728, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.1697869262627728, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtLEJ8QEJ6GBMGlCS8r232GksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96TIxml/\
V6vp69a80Fykt7A02NrhnKWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnV/g+\
8KTgYOhXwzgzjOrJvoI8Y4muPSPFju1PJlwmwNlP+nR7d+vFzstdD4OxjMAYqoR+\
3hYyzxRomvYQ6Jo1bzmIb/74qDx+KjiP6feCioTqB9Y7VkAsjBTAMZ/\
gWy83U3cxMQOCgCIXTpOT57DtBdooJqZjOsvxjfPJ2moLDGqqPTf3Sm7WKciHfxMfyNjF5D0uaXd2B\
IaFccnoOyurf87dAM+v28IrebKaOMzvDUfewLBjqpfpfNa6Tp6Rqmtd9HOuLmq+bDTI86dM/\
b90yLRZDmO7bRh0dmRrvFp7y/A7beFljl0/F/\
d9az57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMe5UfMfoDKlghRPZOMt+\
cf3xsAKvN4UYazfZgHREPQMimlPrIo7bPTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyhOUgX6g4myb78UXEruZxpMuT9QBg6pWqt6G9hfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0rVJfyLA5caU7Dk+\
iXBT6kYmqy5o4dOLqC2xazieRJrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6Db91uKY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1300", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                 CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                 CalculateScan`PlotterScanner`Private`SC$$ = 
                 True, $CellContext`sc1$$ = ArcTan[2], $CellContext`sc1max$$ = 
                 ArcTan[5], $CellContext`sc1min$$ = 
                 ArcTan[3], $CellContext`sc2$$ = 
                 Rational[1, 4] Pi, $CellContext`sc2max$$ = 
                 ArcTan[3], $CellContext`sc2min$$ = 
                 Rational[1, 4] Pi, $CellContext`sc3$$ = ArcTan[
                   Rational[1, 2]], $CellContext`sc3max$$ = 
                 ArcTan[2], $CellContext`sc3min$$ = 
                 0, $CellContext`scColor1$$ = 
                 RGBColor[
                  0.237736, 0.340215, 0.575113], $CellContext`scColor2$$ = 
                 RGBColor[
                  0.624866, 0.673302, 0.264296], $CellContext`scColor3$$ = 
                 RGBColor[
                  0.72987, 0.239399, 0.230961], $CellContext`scCount1$$ = 
                 12, $CellContext`scCount2$$ = 12, $CellContext`scCount3$$ = 
                 12, $CellContext`scTF1$$ = True, $CellContext`scTF2$$ = 
                 False, $CellContext`scTF3$$ = False, 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.9445489399461209, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.5532647182110506, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.9445489399461209, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.5532647182110506, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sa$$], True, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`Sat$$], False, 
                    "show ticks"}, {True, False}}, {{
                    Hold[$CellContext`sc1$$], 
                    ArcTan[2], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2$$], Rational[1, 4] Pi, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc3$$], 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`SC$$], True, 
                    "show single curve"}, {True, False}}, {{
                    Hold[$CellContext`scTF1$$], True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor1$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc1min$$], 
                    ArcTan[3], 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc1max$$], 
                    ArcTan[5], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount1$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF2$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor2$$], 
                    RGBColor[0.624866, 0.673302, 0.264296], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc2min$$], Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc2max$$], 
                    ArcTan[3], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount2$$], 12, " curve count"}, 2, 60,
                     1}, {{
                    Hold[$CellContext`scTF3$$], False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}}, {{
                    Hold[$CellContext`scColor3$$], 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[$CellContext`sc3min$$], 0, 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`sc3max$$], 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`}, {{
                    Hold[$CellContext`scCount3$$], 12, " curve count"}, 2, 60,
                     1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}], 
                    Manipulate`Place[8], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[9], " | ", 
                    Manipulate`Place[10]}], 
                    Row[{
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13]}], 
                    Row[{
                    Manipulate`Place[14], " | ", 
                    Manipulate`Place[15]}], 
                    Row[{
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18]}], 
                    Row[{
                    Manipulate`Place[19], " | ", 
                    Manipulate`Place[20]}], 
                    Row[{
                    Manipulate`Place[21], "  ", 
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5880551$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$5880552$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$5880553$$ = 0, 
                 CalculateScan`PlotterScanner`Private`Sa$5880554$$ = False, 
                 CalculateScan`PlotterScanner`Private`Sat$5880555$$ = 
                 False, $CellContext`sc1$5880556$$ = 
                 0, $CellContext`sc2$5880557$$ = 
                 0, $CellContext`sc3$5880558$$ = 0, 
                 CalculateScan`PlotterScanner`Private`SC$5880559$$ = 
                 False, $CellContext`sc1min$5880560$$ = 
                 0, $CellContext`sc1max$5880561$$ = 
                 0, $CellContext`scCount1$5880562$$ = 
                 0, $CellContext`sc2min$5880563$$ = 
                 0, $CellContext`sc2max$5880564$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`Sa$$ = True, 
                    CalculateScan`PlotterScanner`Private`Sat$$ = False, 
                    CalculateScan`PlotterScanner`Private`SC$$ = 
                    True, $CellContext`sc1$$ = 
                    ArcTan[2], $CellContext`sc1max$$ = 
                    ArcTan[5], $CellContext`sc1min$$ = 
                    ArcTan[3], $CellContext`sc2$$ = 
                    Rational[1, 4] Pi, $CellContext`sc2max$$ = 
                    ArcTan[3], $CellContext`sc2min$$ = 
                    Rational[1, 4] Pi, $CellContext`sc3$$ = ArcTan[
                    Rational[1, 2]], $CellContext`sc3max$$ = 
                    ArcTan[2], $CellContext`sc3min$$ = 
                    0, $CellContext`scColor1$$ = 
                    RGBColor[
                    0.237736, 0.340215, 0.575113], $CellContext`scColor2$$ = 
                    RGBColor[
                    0.624866, 0.673302, 0.264296], $CellContext`scColor3$$ = 
                    RGBColor[
                    0.72987, 0.239399, 0.230961], $CellContext`scCount1$$ = 
                    12, $CellContext`scCount2$$ = 12, $CellContext`scCount3$$ = 
                    12, $CellContext`scTF1$$ = True, $CellContext`scTF2$$ = 
                    False, $CellContext`scTF3$$ = False, 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.9445489399461209, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.5532647182110506}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5880551$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$5880552$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$5880553$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sa$$, 
                    CalculateScan`PlotterScanner`Private`Sa$5880554$$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`Sat$$, 
                    CalculateScan`PlotterScanner`Private`Sat$5880555$$, 
                    False], 
                    Hold[$CellContext`sc1$$, $CellContext`sc1$5880556$$, 0], 
                    Hold[$CellContext`sc2$$, $CellContext`sc2$5880557$$, 0], 
                    Hold[$CellContext`sc3$$, $CellContext`sc3$5880558$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`SC$$, 
                    CalculateScan`PlotterScanner`Private`SC$5880559$$, False], 
                    
                    Hold[$CellContext`sc1min$$, $CellContext`sc1min$5880560$$,
                     0], 
                    
                    Hold[$CellContext`sc1max$$, $CellContext`sc1max$5880561$$,
                     0], 
                    
                    Hold[$CellContext`scCount1$$, \
$CellContext`scCount1$5880562$$, 0], 
                    
                    Hold[$CellContext`sc2min$$, $CellContext`sc2min$5880563$$,
                     0], 
                    
                    Hold[$CellContext`sc2max$$, $CellContext`sc2max$5880564$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$,
                     CalculateScan`PlotterScanner`Private`curveParameterLists$\
, CalculateScan`PlotterScanner`Private`colorLists$, 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$}, 
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ = Flatten[
                    N[
                    Join[
                    If[
                    CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}] -> Directive[Gray]}, {}], 
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$, \
$CellContext`scTF3$$}, CalculateScan`PlotterScanner`Private`j] === True, 
                    Table[MapAt[Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 1]] + (
                    CalculateScan`PlotterScanner`Private`i - 
                    1) (Part[{$CellContext`scCount1$$, \
$CellContext`scCount2$$, $CellContext`scCount3$$}, 
                    CalculateScan`PlotterScanner`Private`j] - 1)^(-1) (Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 2]] - Tan[
                    
                    Part[{{$CellContext`sc1min$$, $CellContext`sc1max$$}, \
{$CellContext`sc2min$$, $CellContext`sc2max$$}, {$CellContext`sc3min$$, \
$CellContext`sc3max$$}}, CalculateScan`PlotterScanner`Private`j, 
                    1]])& , {$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}, CalculateScan`PlotterScanner`Private`j] -> 
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$, \
$CellContext`scColor3$$}, CalculateScan`PlotterScanner`Private`j], {
                    CalculateScan`PlotterScanner`Private`i, 1, 
                    Part[{$CellContext`scCount1$$, $CellContext`scCount2$$, \
$CellContext`scCount3$$}, CalculateScan`PlotterScanner`Private`j] - 
                    1}], {}], {CalculateScan`PlotterScanner`Private`j, 3}]]]]; 
                    If[CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$ === {}, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = \
{}, {CalculateScan`PlotterScanner`Private`curveParameterLists$, 
                    CalculateScan`PlotterScanner`Private`colorLists$} = 
                    Transpose[
                    ReplaceAll[
                    Flatten[
                    CalculateScan`PlotterScanner`Private`\
curveParametersAndColorsToPlot$], Rule -> List]]; 
                    CalculateScan`PlotterScanner`Private`x1L$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2L$ = 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    If[
                    CalculateScan`PlotterScanner`Private`x1$$ >= 0, 
                    CalculateScan`PlotterScanner`Private`x2$$ - 0.01, 
                    CalculateScan`PlotterScanner`Private`x2$$ + 0.01], 
                    CalculateScan`PlotterScanner`Private`x2$$]; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 6}}, {}, {0, 0, 7, 0, 
                    0}, {{16, 0, 2, 4}, {40, 56, 3, 0, 0, 3, 0, 5}, {16, 5, 3,
                     5}, {13, 1, 4, 5, 6}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$5880536, \
$CellContext`C$5880537, $CellContext`C$5880538}, $CellContext`C$5880536 + \
$CellContext`x $CellContext`C$5880537 + $CellContext`x^2 \
$CellContext`C$5880538], Evaluate][$CellContext`x, 
                    Apply[Sequence, {4, 2, 1}]], {$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    2.833030277982336], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    2.833030277982336]}, PlotStyle -> 
                    Directive[Black, Thick]]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 6}}, {}, {0, 0, 7, 0, 
                    0}, {{16, 0, 2, 4}, {40, 56, 3, 0, 0, 3, 0, 5}, {16, 5, 3,
                     5}, {13, 1, 4, 5, 6}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$5880536, \
$CellContext`C$5880537, $CellContext`C$5880538}, $CellContext`C$5880536 + \
$CellContext`x $CellContext`C$5880537 + $CellContext`x^2 \
$CellContext`C$5880538], Evaluate][$CellContext`x, 
                    Apply[Sequence, {4, 2, 1}]], {$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    2.833030277982336], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    2.833030277982336]}, PlotStyle -> Directive[Black, Thick],
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$]; 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$ = ReplaceAll[
                    Apply[Hold, {
                    Map[
                    CalculateScan`PlotterScanner`Private`FED0[$CellContext`x, 
                    Apply[Sequence, #]]& , 
                    CalculateScan`PlotterScanner`Private`curveParameterLists$]\
}], CalculateScan`PlotterScanner`Private`FED0 -> 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real], 
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}, {3, 0, 2}, {3, 0, 
                    3}, {3, 0, 6}}, {}, {0, 0, 7, 0, 
                    0}, {{16, 0, 2, 4}, {40, 56, 3, 0, 0, 3, 0, 5}, {16, 5, 3,
                     5}, {13, 1, 4, 5, 6}, {1}}, 
                    
                    Function[{$CellContext`x, $CellContext`C$5880536, \
$CellContext`C$5880537, $CellContext`C$5880538}, $CellContext`C$5880536 + \
$CellContext`x $CellContext`C$5880537 + $CellContext`x^2 \
$CellContext`C$5880538], Evaluate]]; 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ = 
                    Apply[
                    Function[CalculateScan`PlotterScanner`Private`curveList$, 
                    Plot[
                    CalculateScan`PlotterScanner`Private`curveList$, \
{$CellContext`x, 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1L$, 
                    2.833030277982336], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2L$, 
                    2.833030277982336]}, 
                    Evaluate[PlotStyle -> Map[Directive[#, 
                    AbsoluteThickness[1]]& , 
                    CalculateScan`PlotterScanner`Private`colorLists$], 
                    PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$]], {HoldAll}], 
                    CalculateScan`PlotterScanner`Private`\
functionsToPlotHeldList$]; Null]; ReplaceAll[
                    Column[{
                    Grid[{{
                    Style["embedding function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`x C[1] + $CellContext`x^2 C[2], C[
                    Pattern[CalculateScan`PlotterScanner`Private`i, 
                    Blank[]]] :> Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`i]]}, {
                    Style["embedding ODE", 
                    GrayLevel[0.3]], 
                    Part[
                    
                    Flatten[{Derivative[3][$CellContext`y][$CellContext`x] == 
                    0}], 1]}}, Alignment -> Left], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Style["no curves to show", Gray], 
                    
                    Show[{CalculateScan`PlotterScanner`Private`\
embeddingCurvePlots$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}, 
                    PlotRange -> {
                    Automatic, CalculateScan`PlotterScanner`Private`pRY$}, 
                    ImageSize -> 360, ImagePadding -> 12, 
                    If[CalculateScan`PlotterScanner`Private`Sa$$, 
                    Apply[Sequence, {Axes -> True, AxesStyle -> Gray}], 
                    Apply[Sequence, {Axes -> False}]], 
                    If[CalculateScan`PlotterScanner`Private`Sat$$, 
                    Apply[Sequence, {Ticks -> True}], 
                    Apply[Sequence, {Ticks -> False}]]]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`SC$$ === False, 
                    CalculateScan`PlotterScanner`Private`embeddingCurvePlots$ === \
{}], 
                    Apply[Sequence, {}], 
                    Grid[{{
                    Style["\[LongDash]", Bold, Black], 
                    Style["original function", 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`x C[1] + $CellContext`x^2 C[2], {
                    C[0] -> 4, C[1] -> 2, C[2] -> 1}]}, 
                    If[CalculateScan`PlotterScanner`Private`SC$$ === True, {
                    Style["\[LongDash]", Bold, Gray], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], 
                    RawBoxes["j"]], "\[Hyphen]values function"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`x C[1] + $CellContext`x^2 C[2], 
                    Apply[Rule, 
                    Transpose[{{
                    C[0], 
                    C[1], 
                    C[2]}, 
                    
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}]}], {1}]]}, 
                    Apply[Sequence, {}]], 
                    Apply[Sequence, 
                    DeleteCases[
                    Table[
                    If[
                    Part[{$CellContext`scTF1$$, $CellContext`scTF2$$, \
$CellContext`scTF3$$}, CalculateScan`PlotterScanner`Private`j] === True, {
                    Style["\[LongDash]", Bold, 
                    
                    Part[{$CellContext`scColor1$$, $CellContext`scColor2$$, \
$CellContext`scColor3$$}, CalculateScan`PlotterScanner`Private`j]], 
                    Style[
                    Row[{
                    Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j], 
                    "\[Hyphen]family"}], 
                    GrayLevel[0.3]], 
                    ReplaceAll[
                    C[0] + $CellContext`x C[1] + $CellContext`x^2 C[2], 
                    Apply[Rule, 
                    Transpose[{{
                    C[0], 
                    C[1], 
                    C[2]}, 
                    MapAt[Subscript[
                    RawBoxes["c"], CalculateScan`PlotterScanner`Private`j]& , 
                    
                    Tan[{$CellContext`sc1$$, $CellContext`sc2$$, \
$CellContext`sc3$$}], CalculateScan`PlotterScanner`Private`j]}], {
                    1}]]}, {}], {
                    CalculateScan`PlotterScanner`Private`j, 3}], {}]]}, 
                    Alignment -> Left]]}, 
                    Dividers -> {
                    False, {
                    False, False, 
                    False}}], $CellContext`x -> $CellContext`x11986]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.9445489399461209, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.5532647182110506, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`Sa$$, True, 
                    "show axes"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`Sat$$, False, 
                    "show ticks"}, {True, False}, ControlPlacement -> 
                    4}, {{$CellContext`sc1$$, 
                    ArcTan[2], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 1], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    5}, {{$CellContext`sc2$$, Rational[1, 4] Pi, 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 2], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    6}, {{$CellContext`sc3$$, 
                    ArcTan[
                    Rational[1, 2]], 
                    Row[{
                    Subscript[
                    RawBoxes["c"], 3], " value"}]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Small, ControlPlacement -> 
                    7}, {{CalculateScan`PlotterScanner`Private`SC$$, True, 
                    "show single curve"}, {True, False}, ControlPlacement -> 
                    8}, {{$CellContext`scTF1$$, True, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 1], " family"}]}, {True, False}, 
                    ControlPlacement -> 9}, {{$CellContext`scColor1$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    10}, {{$CellContext`sc1min$$, 
                    ArcTan[3], 
                    Subscript[
                    RawBoxes["c"], 1, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    11}, {{$CellContext`sc1max$$, 
                    ArcTan[5], 
                    Subscript[
                    RawBoxes["c"], 1, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    12}, {{$CellContext`scCount1$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    13}, {{$CellContext`scTF2$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 2], " family"}]}, {True, False}, 
                    ControlPlacement -> 14}, {{$CellContext`scColor2$$, 
                    RGBColor[0.624866, 0.673302, 0.264296], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    15}, {{$CellContext`sc2min$$, Rational[1, 4] Pi, 
                    Subscript[
                    RawBoxes["c"], 2, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    16}, {{$CellContext`sc2max$$, 
                    ArcTan[3], 
                    Subscript[
                    RawBoxes["c"], 2, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    17}, {{$CellContext`scCount2$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 
                    18}, {{$CellContext`scTF3$$, False, 
                    Row[{"show ", 
                    Subscript[
                    RawBoxes["c"], 3], " family"}]}, {True, False}, 
                    ControlPlacement -> 19}, {{$CellContext`scColor3$$, 
                    RGBColor[0.72987, 0.239399, 0.230961], " color"}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, ControlPlacement -> 
                    20}, {{$CellContext`sc3min$$, 0, 
                    Subscript[
                    RawBoxes["c"], 3, "min"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    21}, {{$CellContext`sc3max$$, 
                    ArcTan[2], 
                    Subscript[
                    RawBoxes["c"], 3, "max"]}, -1.5692255304681018`, 
                    1.5692255304681018`, ImageSize -> Tiny, ControlPlacement -> 
                    22}, {{$CellContext`scCount3$$, 12, " curve count"}, 2, 
                    60, 1, ImageSize -> Tiny, ControlPlacement -> 23}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2]}], 
                    Row[{
                    Manipulate`Place[3], "  ", 
                    Manipulate`Place[4]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Style["Curve parameters", Plain], 
                    Column[{
                    Manipulate`Place[5], 
                    Manipulate`Place[6], 
                    Manipulate`Place[7]}], 
                    Manipulate`Place[8], 
                    Style["Show curve families", Plain], 
                    Column[{
                    Row[{
                    Manipulate`Place[9], " | ", 
                    Manipulate`Place[10]}], 
                    Row[{
                    Manipulate`Place[11], "  ", 
                    Manipulate`Place[12], "  ", 
                    Manipulate`Place[13]}], 
                    Row[{
                    Manipulate`Place[14], " | ", 
                    Manipulate`Place[15]}], 
                    Row[{
                    Manipulate`Place[16], "  ", 
                    Manipulate`Place[17], "  ", 
                    Manipulate`Place[18]}], 
                    Row[{
                    Manipulate`Place[19], " | ", 
                    Manipulate`Place[20]}], 
                    Row[{
                    Manipulate`Place[21], "  ", 
                    Manipulate`Place[22], "  ", 
                    Manipulate`Place[23]}]}]}], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{MakeBoxes[$CellContext`x11986, 
                    Pattern[CalculateScan`PlotterScanner`Private`form$, 
                    Blank[]]] := "x"}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMgDFpfEACOhiTBpSkfK8XX1IL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJPWaJrz0ixI/\
uTCZcJ4ewnPN7e2Xm6vfXSw2AsI2IMKKG32kLmU0U0pD0EumLNW07EN398UB4/FZzH8L0AkYC+\
Z71jRaiFkYJwzCf41ovN1G1MzBBBiaLnTpOT57DtBdooJrIxzHJ842yynrUFJirTnps7JTfrFOTDv4\
4PZOxi8h6XtDs7AsPCuGD0nZbVP+dugOfXbeGVPF5NHOb3hiNvxLAj0Mt0PmldJ89I1bUu+\
jlX5zVfNhrk2VOm/l86YNosh/G8bRgwO7Q1Xq29ZfgXbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5MMv3yR8Wt5HKqyZD3fWEgA7VW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAIjPT5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DSGRuM4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod14$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1400", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`iter$$ = 8, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`P$$ = {
                  0.20492770391951742`, 1.231703875117729}, 
                 CalculateScan`PlotterScanner`Private`sf$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`iter$$], 8, 
                    "backward iterations"}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
                    11, 12}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sf$$], False, 
                    "show frame"}, {True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[CalculateScan`PlotterScanner`Private`P$$], {
                    0.20492770391951742`, 1.231703875117729}}}}, 
                 Typeset`size$$ = Automatic, Typeset`update$$ = 0, 
                 Typeset`initDone$$ = False, Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1817331$$ = 
                 False, CalculateScan`PlotterScanner`Private`iter$1817336$$ = 
                 0, CalculateScan`PlotterScanner`Private`sf$1817337$$ = 
                 False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`iter$$ = 8, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`P$$ = {
                    0.20492770391951742`, 1.231703875117729}, 
                    CalculateScan`PlotterScanner`Private`sf$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1817331$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`iter$$, 
                    CalculateScan`PlotterScanner`Private`iter$1817336$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sf$$, 
                    CalculateScan`PlotterScanner`Private`sf$1817337$$, 
                    False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Quiet[
                    Graphics[{
                    Dynamic[{
                    AbsolutePointSize[1.5], 
                    RGBColor[0.237, 0.34, 0.575], 
                    Point[
                    Map[{
                    Re[#], 
                    Im[#]}& , 
                    Flatten[
                    NestList[Union[
                    Flatten[
                    Map[ReplaceAll[$CellContext`x, 
                    Solve[
                    4 + 2 $CellContext`x + $CellContext`x^2 == #, \
$CellContext`x]]& , #]]]& , {
                    Dot[CalculateScan`PlotterScanner`Private`P$$, {1, I}]}, 
                    CalculateScan`PlotterScanner`Private`iter$$]]]]}], {
                    Locator[
                    Dynamic[
                    CalculateScan`PlotterScanner`Private`P$$, (
                    CalculateScan`PlotterScanner`Private`P$$ = {
                    Max[
                    Min[
                    Part[#, 1], 
                    
                    Part[{{-3.543736263830092, 
                    1.543736263830092}, {-2.543736263830092, 
                    2.543736263830092}}, 1, 2]], 
                    
                    Part[{{-3.543736263830092, 
                    1.543736263830092}, {-2.543736263830092, 
                    2.543736263830092}}, 1, 1]], 
                    Max[
                    Min[
                    Part[#, 2], 
                    
                    Part[{{-3.543736263830092, 
                    1.543736263830092}, {-2.543736263830092, 
                    2.543736263830092}}, 2, 2]], 
                    
                    Part[{{-3.543736263830092, 
                    1.543736263830092}, {-2.543736263830092, 
                    2.543736263830092}}, 2, 1]]})& ]]}}, 
                    PlotRange -> {{-3.6776171198211496`, 
                    1.6776171198211496`}, {-2.6776171198211496`, 
                    2.6776171198211496`}}, ImageMargins -> 20, ImageSize -> 
                    240, 
                    If[
                    CalculateScan`PlotterScanner`Private`sf$$, Frame -> True, 
                    Apply[Sequence, {}]]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`iter$$, 8, 
                    "backward iterations"}, {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 
                    11, 12}, ControlType -> SetterBar, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`sf$$, False, 
                    "show frame"}, {True, False}, ControlPlacement -> 2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Column[{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`P$$, {
                    0.20492770391951742`, 1.231703875117729}}, ControlType -> 
                    None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfEd2Q4AsSoxtj0oCSlO+\
9JU5i4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJVGKCp5cw2d3jAmJ3iMMfpDY+\
W4a817IGWh3foPvA4sKBpp81ZRRTYmaHkjIMxqp2jOW9MT8ZMpEBIz+JM+\
Gr4evdrZfOBiMZQxaE8nVTlvIPJOgSNJDoBvGvGPAv7nj4/\
L4qWAsJN8LwiOiHhrvREJsYAQHhvl433q1mbqHiWngMcj40mmy8hy1vUBpSXk6IbMc37iYrGFbYJCp\
ctzcL7lZpyAX/i18IEIbk/PYpO3ZEugXxhWj77ys/jl3Azy/bQsvxelq4jC/XYa8gaYnRC3T+\
bx1nRwjVdfa6OdcXdZ82WiQF0+Z+n/\
piCq9HMZ22zDI7NjUeLX2luFftoUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G34\
jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe6go+zLHxW3ksu5JkPeD7kmKZFrRX8b6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWBRHVJx+LAlubMP4l+\
WeAjwlOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb4PJuE4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False, False, False}, True}, Typeset`aux5$$ = {
   True, False, {False, False, False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False, False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "14", "datatypes" -> "Math", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "1.611", "parsetiming" -> "0.234", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP43011eed6fg7ea44dcf000028i97c9a9e1ab75f", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "4", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa43111eed6fg7ea44dcf00006ac787a47h486a066430556393126808734", "version" -> 
    "2.6", "inputstring" -> "x^2 + 2 x + 4"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2022, 9, 8, 20, 40, 20.8979784`9.072679210567822}, "Line" -> 9,
     "SessionID" -> 19476632447692935180}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "x^2 + 2 x + 4"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1073., {1549.3544921875, 1554.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{3.871672820942979*^9, 
  3.8716728524581127`*^9},ExpressionUUID->"80f660f7-86d5-43ac-9421-\
e9c27ea34cff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Resolve", "[", 
  RowBox[{
   SubscriptBox["\[Exists]", 
    RowBox[{"x", ",", 
     RowBox[{"x", "\[Element]", "PositiveIntegers"}]}]], 
   RowBox[{
    RowBox[{"3", "x"}], "<", "3"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8716731394367633`*^9, 3.8716731566232667`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"21c851d1-9be3-48c8-a92b-486449c8e825"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.8716731574199667`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"5ba1087c-c079-461e-8093-6426f738545c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"3", "x"}], "==", "3"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.871673163746915*^9, 3.8716731686234074`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"060a4a15-50d7-49d1-aa9d-59b3b562db77"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", "1"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8716731689335256`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"7a86489e-2c9f-48df-ab85-05e91feef15e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"3", "x"}], "<", "3"}], ")"}], "===", 
  RowBox[{"(", 
   RowBox[{"x", "<", "1"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.87167317874199*^9, 3.87167318614106*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"8e61a29d-b032-4487-8fb2-d6f765375f54"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.8716731867213163`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"9d33d9e5-808e-4575-9751-9b4724df9b1d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"3", "x"}], "<", "3"}], ")"}], "==", 
  RowBox[{"(", 
   RowBox[{"x", "<", "1"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.87167317874199*^9, 3.8716732005651855`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"4bd6e226-d04d-4dc3-9d86-f2a5abc2c843"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"3", " ", "x"}], "<", "3"}], ")"}], "\[Equal]", 
  RowBox[{"(", 
   RowBox[{"x", "<", "1"}], ")"}]}]], "Output",
 CellChangeTimes->{{3.8716731965063763`*^9, 3.8716732008733387`*^9}},
 CellLabel->"Out[14]=",ExpressionUUID->"e09c041e-0a9b-4748-84c0-5755f23cc60c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"3", "x"}], "<", "3"}], ")"}], "==", 
   RowBox[{"(", 
    RowBox[{"x", "<", "1"}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871673203628896*^9, 3.871673205553067*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"a30b8194-18e8-47a3-83cd-b6ee6a5eab7b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "<", "1"}], ")"}], "\[Equal]", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"3", " ", "x"}], "<", "3"}], ")"}]}]], "Output",
 CellChangeTimes->{3.8716732058507433`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"db2230fa-3079-4dff-8408-636109a6f8a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"3", "x"}], "<", "3"}], "\[Equivalent]", 
   RowBox[{"x", "<", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8716732141468782`*^9, 3.871673223806862*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"d5fbf5a9-9622-440a-8d4a-f6b95741622b"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.871673224160691*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"c1cdc70d-8f6b-4cc9-a026-f7fe5e7b3549"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"NonDisjunction", "[", 
   RowBox[{"P_", ",", "Q_"}], "]"}], ":=", 
  TagBox[GridBox[{
     {"\[Piecewise]", GridBox[{
        {
         RowBox[{
          RowBox[{"{", 
           RowBox[{"P", ",", "Q"}], "}"}], "==", 
          RowBox[{"{", 
           RowBox[{"True", ",", "True"}], "}"}]}], "False"},
        {
         RowBox[{
          RowBox[{"{", 
           RowBox[{"P", ",", "Q"}], "}"}], "==", 
          RowBox[{"{", 
           RowBox[{"True", ",", "False"}], "}"}]}], "False"},
        {
         RowBox[{
          RowBox[{"{", 
           RowBox[{"P", ",", "Q"}], "}"}], "==", 
          RowBox[{"{", 
           RowBox[{"False", ",", "True"}], "}"}]}], "False"},
        {
         RowBox[{
          RowBox[{"{", 
           RowBox[{"P", ",", "Q"}], "}"}], "==", 
          RowBox[{"{", 
           RowBox[{"False", ",", "False"}], "}"}]}], "True"}
       },
       AllowedDimensions->{2, Automatic},
       Editable->True,
       GridBoxAlignment->{
        "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
          "RowsIndexed" -> {}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
         "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.84]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}},
       Selectable->True]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxItemSize->{
     "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.35]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   "Piecewise",
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True,
   Selectable->False,
   StripWrapperBoxes->True]}]], "Input",
 CellChangeTimes->{{3.8716737633020363`*^9, 3.8716737807898693`*^9}, {
  3.871673814211345*^9, 3.8716738594510317`*^9}, {3.8716739048335133`*^9, 
  3.8716739477208157`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"4ab90be1-a7fe-46f1-bbb6-304ce127aca4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"P", "==", "True"}], ")"}], "\[And]", 
    RowBox[{"(", 
     RowBox[{"Q", "==", "True"}], ")"}]}], ")"}], "==", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"P", ",", "Q"}], "}"}], "==", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True"}], "}"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.8716738623206835`*^9, 3.871673885835188*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"8e64b351-f4a5-4eb7-aa26-358c9f327ff2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"P", "\[Equal]", "True"}], "&&", 
    RowBox[{"Q", "\[Equal]", "True"}]}], ")"}], "\[Equal]", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"P", ",", "Q"}], "}"}], "\[Equal]", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True"}], "}"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.8716738861941485`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"1f0e34b1-dff6-4fdc-b386-01441ab2d8a6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"P", "==", "True"}], ")"}], "\[And]", 
     RowBox[{"(", 
      RowBox[{"Q", "==", "True"}], ")"}]}], ")"}], "==", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"P", ",", "Q"}], "}"}], "==", 
     RowBox[{"{", 
      RowBox[{"True", ",", "True"}], "}"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871673887825617*^9, 3.8716738920608115`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"5506c748-a26b-481d-89d7-9bf5fc2f63a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"P", "\[Equal]", "True"}], "&&", 
    RowBox[{"Q", "\[Equal]", "True"}]}], ")"}], "\[Equal]", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"P", ",", "Q"}], "}"}], "\[Equal]", 
    RowBox[{"{", 
     RowBox[{"True", ",", "True"}], "}"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.871673892366763*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"0437409b-6aa2-4bca-ba80-3ff55703f6bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{"Simplify", "[", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"P", "==", "True"}], ")"}], "\[And]", 
      RowBox[{"(", 
       RowBox[{"Q", "==", "True"}], ")"}]}], ")"}], "==", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"P", ",", "Q"}], "}"}], "==", 
      RowBox[{"{", 
       RowBox[{"True", ",", "True"}], "}"}]}], ")"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8716738943135223`*^9, 3.8716738957309866`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"c9ac2679-cfd0-4d21-b772-c954251d3422"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.871673896039878*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"28e79f2b-6634-42a3-9226-8753094cc891"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanTable", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"P", ",", "Q", ",", 
     RowBox[{"NonDisjunction", "[", 
      RowBox[{"P", ",", "Q"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"P", ",", "Q"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8716739501351414`*^9, 3.8716739639816265`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"3f843760-4039-4f5c-ba85-0cf59eb14ec5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"True", ",", "True", ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"True", ",", "False", ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", "True", ",", "False"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"False", ",", "False", ",", "True"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.871673964267984*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"ea5a7d70-4941-4e46-9269-da82a1e0d9ab"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"BooleanTable", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"P", ",", "Q", ",", 
      RowBox[{"NonDisjunction", "[", 
       RowBox[{"P", ",", "Q"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"P", ",", "Q"}], "}"}]}], "]"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.871673965586543*^9, 3.871673970361492*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"a5b5b854-b866-4d6a-87a1-39550d8889fd"],

Cell[BoxData[
 TagBox[GridBox[{
    {"True", "True", "False"},
    {"True", "False", "False"},
    {"False", "True", "False"},
    {"False", "False", "True"}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.871673970616066*^9},
 CellLabel->
  "Out[22]//TableForm=",ExpressionUUID->"2ac25c0a-7825-4437-9ce7-\
624138a993c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{"BooleanTable", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"P", ",", "Q", ",", 
       RowBox[{"NonDisjunction", "[", 
        RowBox[{"P", ",", "Q"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"P", ",", "Q"}], "}"}]}], "]"}], ",", 
   RowBox[{"TableHeadings", "->", 
    RowBox[{"{", 
     RowBox[{"None", ",", " ", 
      RowBox[{"{", 
       RowBox[{"P", ",", "Q", ",", "P\[CapitalDelta]Q"}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.871673965586543*^9, 3.8716740057687497`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"13079a82-1426-4871-ba35-8c9b19724715"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["P",
       HoldForm], 
      TagBox["Q",
       HoldForm], 
      TagBox["P\[CapitalDelta]Q",
       HoldForm]},
     {"True", "True", "False"},
     {"True", "False", "False"},
     {"False", "True", "False"},
     {"False", "False", "True"}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "Rows" -> {False, True, {False}, False}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {$CellContext`P, $CellContext`Q, \
$CellContext`P\[CapitalDelta]Q}}]]]], "Output",
 CellChangeTimes->{{3.8716739929551964`*^9, 3.8716740062739615`*^9}},
 CellLabel->
  "Out[24]//TableForm=",ExpressionUUID->"00a5476e-509b-48db-b6fa-\
7aff219f4eed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TableForm", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"BooleanTable", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"P", ",", "Q", ",", 
        RowBox[{"NonDisjunction", "[", 
         RowBox[{"P", ",", "Q"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"P", ",", "Q"}], "}"}]}], "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"True", "->", "\"\<T\>\""}], ",", 
      RowBox[{"False", "->", "\"\<F\>\""}]}], "}"}]}], ",", 
   RowBox[{"TableHeadings", "->", 
    RowBox[{"{", 
     RowBox[{"None", ",", " ", 
      RowBox[{"{", 
       RowBox[{"P", ",", "Q", ",", "P\[CapitalDelta]Q"}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.871673965586543*^9, 3.8716740222222977`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"e82c9895-a207-4aa1-8c1a-a53c816d8482"],

Cell[BoxData[
 TagBox[
  TagBox[GridBox[{
     {
      TagBox["P",
       HoldForm], 
      TagBox["Q",
       HoldForm], 
      TagBox["P\[CapitalDelta]Q",
       HoldForm]},
     {"\<\"T\"\>", "\<\"T\"\>", "\<\"F\"\>"},
     {"\<\"T\"\>", "\<\"F\"\>", "\<\"F\"\>"},
     {"\<\"F\"\>", "\<\"T\"\>", "\<\"F\"\>"},
     {"\<\"F\"\>", "\<\"F\"\>", "\<\"T\"\>"}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
    GridBoxDividers->{
     "Columns" -> {{False}}, "Rows" -> {False, True, {False}, False}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[2.0999999999999996`]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}],
   {None, OutputFormsDump`HeadedColumns}],
  Function[BoxForm`e$, 
   TableForm[
   BoxForm`e$, 
    TableHeadings -> {
     None, {$CellContext`P, $CellContext`Q, \
$CellContext`P\[CapitalDelta]Q}}]]]], "Output",
 CellChangeTimes->{3.8716740229159822`*^9},
 CellLabel->
  "Out[25]//TableForm=",ExpressionUUID->"0681edc8-fbab-42e6-af7e-\
1472ef67202e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"P", ",", "Q", ",", "P\[CapitalDelta]Q"}], "}"}], "}"}], ",", 
     RowBox[{
      RowBox[{"BooleanTable", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"P", ",", "Q", ",", 
          RowBox[{"NonDisjunction", "[", 
           RowBox[{"P", ",", "Q"}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"P", ",", "Q"}], "}"}]}], "]"}], "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"True", "->", "\"\<T\>\""}], ",", 
        RowBox[{"False", "->", "\"\<F\>\""}]}], "}"}]}]}], "]"}], ",", 
   RowBox[{"Frame", "->", "All"}], ",", 
   RowBox[{"Spacings", "->", 
    RowBox[{"{", 
     RowBox[{"Automatic", ",", " ", "Automatic"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871673965586543*^9, 3.8716740222222977`*^9}, {
  3.8716740681271143`*^9, 3.8716741141913457`*^9}, {3.8716741473294115`*^9, 
  3.8716741537790146`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"7c87f833-bcd9-46ee-bc33-369f82e6b6c6"],

Cell[BoxData[
 TagBox[GridBox[{
    {"P", "Q", "P\[CapitalDelta]Q"},
    {"\<\"T\"\>", "\<\"T\"\>", "\<\"F\"\>"},
    {"\<\"T\"\>", "\<\"F\"\>", "\<\"F\"\>"},
    {"\<\"F\"\>", "\<\"T\"\>", "\<\"F\"\>"},
    {"\<\"F\"\>", "\<\"F\"\>", "\<\"T\"\>"}
   },
   AutoDelete->False,
   GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.8716741540497885`*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"48bcf289-287a-4006-823f-e381f338a35b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanTable", "[", 
  RowBox[{"\[Not]", 
   RowBox[{"(", 
    RowBox[{"P", "\[And]", "Q"}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8716743363714733`*^9, 3.871674357976366*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"3c696662-ba21-42fa-b3e9-c2a9b623e1aa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", "True", ",", "True", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.871674358270974*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"824a8c7b-6e5b-4764-bd65-7ff063be899f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanTable", "[", 
  RowBox[{"\[Not]", 
   RowBox[{"(", 
    RowBox[{"P", "\[Or]", "Q"}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8716743363714733`*^9, 3.8716743787452135`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"893950d2-3b0f-49ea-af96-3920c7019c5f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"False", ",", "False", ",", "False", ",", "True"}], "}"}]], "Output",
 CellChangeTimes->{3.8716743791959596`*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"00952187-29d2-4ea9-af17-77f0546d7790"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NonDisjunction", "[", 
    RowBox[{"P", ",", "Q"}], "]"}], "==", 
   RowBox[{"\[Not]", 
    RowBox[{"(", 
     RowBox[{"P", "\[Or]", "Q"}], ")"}]}]}], "//", "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.8716744319838324`*^9, 3.871674443083207*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"7dc77efe-ba13-4bc4-bb7f-e7617b74cf39"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"P", ",", "Q"}], "}"}], "\[Equal]", 
    RowBox[{"{", 
     RowBox[{"False", ",", "False"}], "}"}]}], ")"}], "\[Equal]", 
  RowBox[{"!", 
   RowBox[{"(", 
    RowBox[{"P", "||", "Q"}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.8716744433515425`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"2e2445ac-127a-4b48-989f-a93f154113f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"NonDisjunction", "[", 
    RowBox[{"P", ",", "Q"}], "]"}], "==", 
   RowBox[{"\[Not]", 
    RowBox[{"(", 
     RowBox[{"P", "\[Or]", "Q"}], ")"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8716744445775404`*^9, 3.871674448575306*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"64d77085-68d3-40b2-bc93-03a0dbcba31c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"P", "\[Equal]", "False"}], "&&", 
    RowBox[{"Q", "\[Equal]", "False"}]}], ")"}], "\[Equal]", 
  RowBox[{"!", 
   RowBox[{"(", 
    RowBox[{"P", "||", "Q"}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.8716744489906816`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"f43f79bc-89f2-45bf-af34-c67d119dc86d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"P", ",", "Q"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"(", 
     RowBox[{"NonDisjunction", "[", 
      RowBox[{
       RowBox[{"NonDisjunction", "[", 
        RowBox[{"P", ",", "Q"}], "]"}], ",", 
       RowBox[{"NonDisjunction", "[", 
        RowBox[{"P", ",", "Q"}], "]"}]}], "]"}], ")"}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8716744557385006`*^9, 3.8716744571443043`*^9}, {
  3.8716745147570634`*^9, 3.871674555496459*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"c9d766fd-b9dc-444f-8d21-da0f2b410917"],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"P", ",", "Q"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"NonDisjunction", "[", 
     RowBox[{
      RowBox[{"NonDisjunction", "[", 
       RowBox[{"P", ",", "Q"}], "]"}], ",", 
      RowBox[{"NonDisjunction", "[", 
       RowBox[{"P", ",", "Q"}], "]"}]}], "]"}], "}"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.871674538520602*^9, 3.871674558096633*^9}},
 CellLabel->"Out[37]=",ExpressionUUID->"5f93c738-e602-408e-b79f-9652982eb6bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"P", ",", "Q"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"(", 
      RowBox[{"NonDisjunction", "[", 
       RowBox[{
        RowBox[{"NonDisjunction", "[", 
         RowBox[{"P", ",", "Q"}], "]"}], ",", 
        RowBox[{"NonDisjunction", "[", 
         RowBox[{"P", ",", "Q"}], "]"}]}], "]"}], ")"}], "}"}]}], "]"}], "@@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"True", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "False"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8716745593066964`*^9, 3.8716745693891487`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"bb15faae-39f8-4d20-a513-2163110daac8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"True", ",", "True"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "\[Equal]", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False"}], "}"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"True", ",", "True"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "\[Equal]", 
      RowBox[{"{", 
       RowBox[{"False", ",", "False"}], "}"}]}]}], "}"}], "\[Equal]", 
   RowBox[{"{", 
    RowBox[{"False", ",", "False"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.87167456962138*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"68faf0c3-3f53-4335-8874-218ab982b79b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"P", ",", "Q"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"(", 
      RowBox[{"NonDisjunction", "[", 
       RowBox[{
        RowBox[{"NonDisjunction", "[", 
         RowBox[{"P", ",", "Q"}], "]"}], ",", 
        RowBox[{"NonDisjunction", "[", 
         RowBox[{"P", ",", "Q"}], "]"}]}], "]"}], ")"}], "}"}]}], "]"}], "@@@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"True", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "False"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8716745593066964`*^9, 3.871674599307889*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"2de19b2a-c301-48a3-acd3-2eb3621b6eb2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "True", "}"}], ",", 
   RowBox[{"{", "True", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.871674580391491*^9, 3.8716746000776076`*^9}},
 CellLabel->"Out[40]=",ExpressionUUID->"3416c856-e07d-493e-a581-4c4f46c50f02"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"P", ",", "Q"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"(", 
      RowBox[{"NonDisjunction", "[", 
       RowBox[{
        RowBox[{"NonDisjunction", "[", 
         RowBox[{"P", ",", "Q"}], "]"}], ",", 
        RowBox[{"NonDisjunction", "[", 
         RowBox[{"P", ",", "Q"}], "]"}]}], "]"}], ")"}], "}"}]}], "]"}], "@@@", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"True", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"True", ",", "False"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "True"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"False", ",", "False"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.8716745593066964`*^9, 3.8716746404392433`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"fd2e5c1b-bc3e-4787-897d-56e13aa25aac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "True", "}"}], ",", 
   RowBox[{"{", "True", "}"}], ",", 
   RowBox[{"{", "True", "}"}], ",", 
   RowBox[{"{", "False", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8716746145208406`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"472131d0-a2c5-43e4-a4a7-bee5090ad3e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanTable", "[", "Or", "]"}]], "Input",
 CellChangeTimes->{{3.871674616366835*^9, 3.8716746197228756`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"b2918b25-a890-480d-a77c-f5b477f59c6b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.8716746203396454`*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"58afd424-7ed5-4456-ad08-765aa7c2d11a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanTable", "[", 
  RowBox[{
   RowBox[{"Or", "[", 
    RowBox[{"P", ",", "Q"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"P", ",", "Q"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871674616366835*^9, 3.8716746269896994`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"188c4b91-45d2-416e-ac2c-16e228336733"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "True", ",", "True", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.8716746271956997`*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"58cd1485-3e96-4953-b314-bfc6b761dc7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BooleanTable", "[", 
  RowBox[{
   RowBox[{"NonDisjunction", "[", 
    RowBox[{
     RowBox[{"NonDisjunction", "[", 
      RowBox[{"P", ",", "Q"}], "]"}], ",", 
     RowBox[{"NonDisjunction", "[", 
      RowBox[{"P", ",", "Q"}], "]"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"P", ",", "Q"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871674616366835*^9, 3.8716746499687705`*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"7f4a4cd3-96ff-4d62-8fb8-26ef4a16af71"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", "True", ",", "True", ",", "False"}], "}"}]], "Output",
 CellChangeTimes->{3.871674650995262*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"2c387070-b31f-47e7-87b2-5c436067c183"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{"\[Not]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"x", ">=", "3"}], "\[Or]", 
     RowBox[{"x", "<=", "2"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8716747934570346`*^9, 3.8716748105965824`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"c83b5b0e-a94c-4488-b1dd-44d1e479cb3d"],

Cell[BoxData[
 RowBox[{"2", "<", "x", "<", "3"}]], "Output",
 CellChangeTimes->{3.8716748109907656`*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"7d9776e7-a001-473b-b08e-73fedb547c4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Reduce", "[", 
   RowBox[{"\[Not]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"x", ">=", "3"}], "\[Or]", 
      RowBox[{"x", "<=", "2"}]}], ")"}]}], "]"}], "==", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"x", "<", "3"}], "\[And]", 
    RowBox[{"x", ">", "2"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.8716747934570346`*^9, 3.8716748297936983`*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"795e898f-c823-43a6-9e9b-0040bb6d3518"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"2", "<", "x", "<", "3"}], ")"}], "\[Equal]", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"x", "<", "3"}], "&&", 
    RowBox[{"x", ">", "2"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.871674832507683*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"076d81d4-647f-4795-ad9a-c74ee8deb37c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"Reduce", "[", 
    RowBox[{"\[Not]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"x", ">=", "3"}], "\[Or]", 
       RowBox[{"x", "<=", "2"}]}], ")"}]}], "]"}], "==", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"x", "<", "3"}], "\[And]", 
     RowBox[{"x", ">", "2"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8716748331581445`*^9, 3.8716748351393003`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"33132d6d-20eb-4175-8cff-c2dc1c6160d7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"x", "<", "3"}], "&&", 
    RowBox[{"x", ">", "2"}]}], ")"}], "\[Equal]", 
  RowBox[{"(", 
   RowBox[{"2", "<", "x", "<", "3"}], ")"}]}]], "Output",
 CellChangeTimes->{3.8716748354304066`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"993671a9-6266-4be8-be3d-f638ea1168a0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Resolve", "[", 
  RowBox[{
   RowBox[{"Reduce", "[", 
    RowBox[{"\[Not]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"x", ">=", "3"}], "\[Or]", 
       RowBox[{"x", "<=", "2"}]}], ")"}]}], "]"}], "\[Equivalent]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"x", "<", "3"}], "\[And]", 
     RowBox[{"x", ">", "2"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8716748331581445`*^9, 3.871674848637102*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"7002a894-9dc1-4f11-99e8-80ee6d786651"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"x", "<", "3"}], "&&", 
   RowBox[{"x", ">", "2"}]}], "\[Equivalent]", 
  RowBox[{"2", "<", "x", "<", "3"}]}]], "Output",
 CellChangeTimes->{{3.871674841319091*^9, 3.871674849160081*^9}},
 CellLabel->"Out[49]=",ExpressionUUID->"5ddbcc6d-1dc8-416d-821a-750d8b429e91"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"Reduce", "[", 
    RowBox[{"\[Not]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"x", ">=", "3"}], "\[Or]", 
       RowBox[{"x", "<=", "2"}]}], ")"}]}], "]"}], "\[Equivalent]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"x", "<", "3"}], "\[And]", 
     RowBox[{"x", ">", "2"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8716748331581445`*^9, 3.8716748533393807`*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"cd6ed332-ae99-4af9-9eb4-d9d0571e33ae"],

Cell[BoxData[
 RowBox[{"x", "\[Element]", 
  TemplateBox[{},
   "Reals"]}]], "Output",
 CellChangeTimes->{3.8716748535971775`*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"291a5bbc-2101-4644-85a7-ce694e2cbcc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Reduce", "[", 
     RowBox[{"\[Not]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"x", ">=", "3"}], "\[Or]", 
        RowBox[{"x", "<=", "2"}]}], ")"}]}], "]"}], "\[Equivalent]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"x", "<", "3"}], "\[And]", 
      RowBox[{"x", ">", "2"}]}], ")"}]}], ",", "x", ",", "Reals"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8716748331581445`*^9, 3.8716748794347763`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"90a85768-0f16-4fea-bb6e-251a6406c70a"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.871674863724864*^9, 3.8716748797335835`*^9}},
 CellLabel->"Out[52]=",ExpressionUUID->"e9f9f837-9939-48d9-a4c7-c4fb4c11170a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{"\[Not]", 
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["\[Exists]", 
      RowBox[{"x", ",", 
       RowBox[{"x", "\[Element]", "Reals"}]}]], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"y", "+", "4"}], ">", "8"}], ")"}], "\[And]", 
       RowBox[{"(", 
        RowBox[{"y", "<=", "4"}], ")"}]}], ")"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871674967919374*^9, 3.8716749985823746`*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"ebfdff87-b6df-4385-bd5d-19fc89e85656"],

Cell[BoxData[
 RowBox[{"y", "\[Element]", 
  TemplateBox[{},
   "Reals"]}]], "Output",
 CellChangeTimes->{3.8716750004946394`*^9},
 CellLabel->"Out[53]=",ExpressionUUID->"b6f90121-ca96-4267-95c5-0d258b8e4fc2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{"\[Not]", 
   RowBox[{"(", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"y", "+", "4"}], ">", "8"}], ")"}], "\[And]", 
      RowBox[{"(", 
       RowBox[{"y", "<=", "4"}], ")"}]}], ")"}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871674967919374*^9, 3.871675013582817*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"dc397a2f-b938-4490-a3bb-ec924765adf3"],

Cell[BoxData[
 RowBox[{"y", "\[Element]", 
  TemplateBox[{},
   "Reals"]}]], "Output",
 CellChangeTimes->{3.8716750142904887`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"7f8839ea-7c40-476a-be05-534ea0764e15"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"\[Not]", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[Exists]", 
       RowBox[{"x", ",", 
        RowBox[{"x", "\[Element]", "Reals"}]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "+", "4"}], ">", "8"}], ")"}], "\[And]", 
        RowBox[{"(", 
         RowBox[{"y", "<=", "4"}], ")"}]}], ")"}]}], ")"}]}], "\[Equivalent]", 
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["\[ForAll]", 
      RowBox[{"y", ",", 
       RowBox[{"y", "\[Element]", "Reals"}]}]], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"y", "+", "4"}], "<=", "8"}], ")"}], "\[And]", 
       RowBox[{"(", 
        RowBox[{"y", ">", "4"}], ")"}]}], ")"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871674967919374*^9, 3.8716750618898883`*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"f9026321-560d-4185-8cbd-6a2051640bd0"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.8716750625545845`*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"9b89dcd7-4476-4bd8-ae6c-7ed38afe39e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{"\[Not]", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[Exists]", 
       RowBox[{"x", ",", 
        RowBox[{"x", "\[Element]", "Reals"}]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "+", "4"}], ">", "8"}], ")"}], "\[And]", 
        RowBox[{"(", 
         RowBox[{"y", "<=", "4"}], ")"}]}], ")"}]}], ")"}]}], "\[Equivalent]", 
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["\[ForAll]", 
      RowBox[{"y", ",", 
       RowBox[{"y", "\[Element]", "Reals"}]}]], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"y", "+", "4"}], "<=", "8"}], ")"}], "\[Or]", 
       RowBox[{"(", 
        RowBox[{"y", ">", "4"}], ")"}]}], ")"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871674967919374*^9, 3.871675066759486*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"4d1f99f6-8d3e-4fcc-a3c5-2571fc22ac58"],

Cell[BoxData[
 RowBox[{"y", "\[Element]", 
  TemplateBox[{},
   "Reals"]}]], "Output",
 CellChangeTimes->{3.871675067185812*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"a0763177-2b6e-43b8-a132-67e7596fadcd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Not]", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["\[Exists]", 
        RowBox[{"x", ",", 
         RowBox[{"x", "\[Element]", "Reals"}]}]], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"y", "+", "4"}], ">", "8"}], ")"}], "\[And]", 
         RowBox[{"(", 
          RowBox[{"y", "<=", "4"}], ")"}]}], ")"}]}], ")"}]}], 
    "\[Equivalent]", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[ForAll]", 
       RowBox[{"y", ",", 
        RowBox[{"y", "\[Element]", "Reals"}]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "+", "4"}], "<=", "8"}], ")"}], "\[Or]", 
        RowBox[{"(", 
         RowBox[{"y", ">", "4"}], ")"}]}], ")"}]}], ")"}]}], ",", "y", ",", 
   "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.871674967919374*^9, 3.8716750725664654`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"5769a506-ed36-4740-a2bf-1b2ebf1d42ac"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8716750728383465`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"d53182d1-005a-4d75-a650-d79e7f999fe3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Not]", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["\[Exists]", 
        RowBox[{"x", ",", 
         RowBox[{"x", "\[Element]", "Reals"}]}]], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"y", "+", "4"}], ">", "8"}], ")"}], "\[And]", 
         RowBox[{"(", 
          RowBox[{"y", "<=", "4"}], ")"}]}], ")"}]}], ")"}]}], 
    "\[Equivalent]", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[ForAll]", 
       RowBox[{"y", ",", 
        RowBox[{"y", "\[Element]", "Reals"}]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "+", "4"}], "<=", "8"}], ")"}], "\[And]", 
        RowBox[{"(", 
         RowBox[{"y", ">", "4"}], ")"}]}], ")"}]}], ")"}]}], ",", "y", ",", 
   "Reals"}], "]"}]], "Input",
 CellChangeTimes->{{3.871674967919374*^9, 3.871675078104583*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"464ee1dd-b74f-466e-8fbb-47dcaeff7b36"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.871675078469457*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"f4ddb8eb-628c-467e-8f34-3888efab334c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Resolve", "[", 
  RowBox[{
   RowBox[{"\[Not]", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[Exists]", 
       RowBox[{"x", ",", 
        RowBox[{"x", "\[Element]", "Reals"}]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "+", "4"}], ">", "8"}], ")"}], "\[And]", 
        RowBox[{"(", 
         RowBox[{"y", "<=", "4"}], ")"}]}], ")"}]}], ")"}]}], "\[Equivalent]", 
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["\[ForAll]", 
      RowBox[{"y", ",", 
       RowBox[{"y", "\[Element]", "Reals"}]}]], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"y", "+", "4"}], "<=", "8"}], ")"}], "\[Or]", 
       RowBox[{"(", 
        RowBox[{"y", ">", "4"}], ")"}]}], ")"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871675166494739*^9, 3.871675178371195*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"c2c1d8e6-339e-4d2f-90ff-67f847e8df85"],

Cell[BoxData[
 RowBox[{"y", "\[Element]", 
  TemplateBox[{},
   "Reals"]}]], "Output",
 CellChangeTimes->{3.87167517865032*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"9dea5fa8-b0dd-404a-9147-ffd63c90459e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogicalExpand", "[", 
  RowBox[{
   RowBox[{"\[Not]", 
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["\[Exists]", 
       RowBox[{"x", ",", 
        RowBox[{"x", "\[Element]", "Reals"}]}]], 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"y", "+", "4"}], ">", "8"}], ")"}], "\[And]", 
        RowBox[{"(", 
         RowBox[{"y", "<=", "4"}], ")"}]}], ")"}]}], ")"}]}], "\[Equivalent]", 
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["\[ForAll]", 
      RowBox[{"y", ",", 
       RowBox[{"y", "\[Element]", "Reals"}]}]], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"y", "+", "4"}], "<=", "8"}], ")"}], "\[Or]", 
       RowBox[{"(", 
        RowBox[{"y", ">", "4"}], ")"}]}], ")"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871675166494739*^9, 3.871675178371195*^9}, {
  3.8716752485856423`*^9, 3.8716752524256215`*^9}},
 CellLabel->"In[60]:=",ExpressionUUID->"cd5acb45-3bfe-442f-a8ac-dea14b5f21de"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     SubscriptBox["\[Exists]", 
      RowBox[{"x", ",", 
       RowBox[{"x", "\[Element]", 
        TemplateBox[{},
         "Reals"]}]}]], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"4", "+", "y"}], ">", "8"}], "&&", 
       RowBox[{"y", "\[LessEqual]", "4"}]}], ")"}]}], "&&", 
    RowBox[{
     SubscriptBox["\[Exists]", 
      RowBox[{"y", ",", 
       RowBox[{"y", "\[Element]", 
        TemplateBox[{},
         "Reals"]}]}]], 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"4", "+", "y"}], "\[LessEqual]", "8"}], "||", 
        RowBox[{"y", ">", "4"}]}], ")"}]}]}]}], ")"}], "||", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     SubscriptBox["\[ForAll]", 
      RowBox[{"x", ",", 
       RowBox[{"x", "\[Element]", 
        TemplateBox[{},
         "Reals"]}]}]], 
     RowBox[{"!", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"4", "+", "y"}], ">", "8"}], "&&", 
        RowBox[{"y", "\[LessEqual]", "4"}]}], ")"}]}]}], "&&", 
    RowBox[{
     SubscriptBox["\[ForAll]", 
      RowBox[{"y", ",", 
       RowBox[{"y", "\[Element]", 
        TemplateBox[{},
         "Reals"]}]}]], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"4", "+", "y"}], "\[LessEqual]", "8"}], "||", 
       RowBox[{"y", ">", "4"}]}], ")"}]}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.8716752526684904`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"ae61269d-c3bf-4f3e-afc1-e75a6f9bad35"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LogicalExpand", "[", 
  RowBox[{"\[Not]", 
   RowBox[{"(", 
    RowBox[{
     SubscriptBox["\[Exists]", 
      RowBox[{"x", ",", 
       RowBox[{"x", "\[Element]", "Reals"}]}]], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"y", "+", "4"}], ">", "8"}], ")"}], "\[And]", 
       RowBox[{"(", 
        RowBox[{"y", "<=", "4"}], ")"}]}], ")"}]}], ")"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.871675263574767*^9, 3.8716752648502626`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"5842922f-d60f-4379-8f70-c4f93bde0968"],

Cell[BoxData[
 RowBox[{
  SubscriptBox["\[ForAll]", 
   RowBox[{"x", ",", 
    RowBox[{"x", "\[Element]", 
     TemplateBox[{},
      "Reals"]}]}]], 
  RowBox[{"!", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"4", "+", "y"}], ">", "8"}], "&&", 
     RowBox[{"y", "\[LessEqual]", "4"}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.871675265122787*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"d9042f3a-14f4-45fc-a6f7-6cb26f4dfb9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Resolve", "[", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"x", ",", 
      RowBox[{"x", "\[Element]", 
       TemplateBox[{},
        "Reals"]}]}]], 
    RowBox[{"!", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"4", "+", "y"}], ">", "8"}], "&&", 
       RowBox[{"y", "\[LessEqual]", "4"}]}], ")"}]}]}], "]"}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8716752837806096`*^9, 3.871675285127612*^9}},
 NumberMarks->False,
 CellLabel->"In[63]:=",ExpressionUUID->"527f0106-ee3c-4a02-bc0c-37f98aeeec1e"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"y", "\[Element]", 
    TemplateBox[{},
     "Reals"]}], "\[And]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{"4", "-", "y"}], "<", "0"}], "\[Or]", 
     RowBox[{
      RowBox[{"y", "-", "4"}], "\[LessEqual]", "0"}]}], ")"}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.871675276834202*^9, 3.8716752853597317`*^9}},
 CellLabel->
  "Out[63]//TraditionalForm=",ExpressionUUID->"40df5561-efc4-42d9-a9cc-\
3fb1d8d51be0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SuperscriptBox["a", "2"], "-", "1"}], TraditionalForm]],
 FormatType->
  TraditionalForm,ExpressionUUID->"c30f41b8-fcf2-4a4b-b48a-b2b4cd593994"]], \
"WolframAlphaLong",
 CellChangeTimes->{{3.87167557865646*^9, 3.8716755835407505`*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"983184f2-1e1f-4e43-9c20-40c862baf620"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "a^2 - 1", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"a^2 - 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               SuperscriptBox["a", "2"], "-", "1"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa19821492913di7c77ha100002824826g79a2a8a68350669649384844499"}, {
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Geometric figure", "scanner" -> "Geometry", "id" -> 
     "GeometricFigure (ofBoundary)", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox["\"parabola\"", 
              $CellContext`TagBoxWrapper[
              "Entity" -> {$CellContext`GeometryData, "Parabola"}]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Properties", "input" -> 
         "GeometricFigure (ofBoundary)__Properties"}, {}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"a^2 - 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"(", 
                RowBox[{"a", "-", "1"}], ")"}], " ", 
              RowBox[{"(", 
                RowBox[{"a", "+", "1"}], ")"}]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "AlternateForm__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> "Root", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Select[Solve[-1 + a^2 == 0, a], Element[a /. #1, Reals] & ]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"a", "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], BaselinePosition -> Baseline, 
                   ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"a", "\[LongEqual]", "1"}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Root__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Polynomial discriminant", "scanner" -> "Expression", 
     "id" -> "PolynomialDiscriminant", "position" -> "600", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Discriminant[-1 + a^2, a]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"\[CapitalDelta]", "\[LongEqual]", "4"}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Show class number", "input" -> 
         "PolynomialDiscriminant__Show class number"}, {}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Property as a function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertyAsAFunction", "position" -> "700",
      "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> "Parity"}, {
       XMLElement["minput", {}, {"Simplify[-1 + a^2 == -1 + (-a)^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["\"even\"", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "800", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[-1 + a^2, a]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "a"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "a"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "-", "1"}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"2", " ", "a"}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[a^2 - 1, a]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["a", "2"], "-", "1"}], ")"}], 
                   RowBox[{"\[DifferentialD]", "a"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   RowBox[{
                    FractionBox[
                    SuperscriptBox["a", "3"], "3"], "-", "a"}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Global minimum", "scanner" -> "GlobalExtrema", "id" -> 
     "GlobalMinimum", "position" -> "1000", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Minimize[a^2 - 1, a]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                RowBox[{"min", "\[NoBreak]", 
                  RowBox[{"{", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["a", "2"], "-", "1"}], HoldForm], "}"}]}], 
                "\[LongEqual]", 
                RowBox[{"-", "1"}]}], 
              StyleBox["\" at \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{
                TagBox["a", HoldForm], "\[LongEqual]", "0"}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "GlobalMinimum__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> "DefiniteIntegral", "position" -> 
     "1100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Integrate[-1 + a^2, {a, -1, 1}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  RowBox[{"-", "1"}], "1"], 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox["a", "2"]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "a"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox["4", "3"]}], Identity], "\[TildeTilde]", 
              TagBox[
               RowBox[{"-", "1.3333333333333333`"}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegral__1_More digits"}, {}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> 
     "Definite integral area below the axis between the smallest and largest \
real roots", "scanner" -> "InterestingDefiniteIntegrals", "id" -> 
     "DefiniteIntegralAreaBelowTheAxisBetweenTheSmallestAndLargestRealRoots", 
     "position" -> "1200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "N[Integrate[(-1 + a^2) UnitStep[1 - a^2], {a, -1, 1}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  RowBox[{"-", "1"}], "1"], 
                 RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    SuperscriptBox["a", "2"]}], ")"}], " ", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"1", "-", 
                    SuperscriptBox["a", "2"]}]}]}, "UnitStepSeq"]}], 
                   RowBox[{"\[DifferentialD]", "a"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox["4", "3"]}], Identity], "\[TildeTilde]", 
              TagBox[
               RowBox[{"-", "1.3333333333333333`"}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegralAreaBelowTheAxisBetweenTheSmallestAndLargestRealRo\
ots__1_More digits"}, {}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement[
       "info", {"text" -> "\[Theta](x) is the Heaviside step function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/UnitStep.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/GeneralizedFunctions/UnitStep", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HeavisideStepFunction.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1300", "error" -> 
     "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa19831492913di7c77ha100002feb4044hicbi75d8350669649384844499"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod14$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1400", 
     "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa19841492913di7c77ha1000013g9049fdgd9g2588350669649384844499"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod15$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1500", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa19851492913di7c77ha1000010a9ci2a169df4ef8350669649384844499"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False, False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {{2, 
     Hold[Typeset`pod2$$], 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa19821492913di7c77ha100002824826g79a2a8a68350669649384844499"}, {13, 
     Hold[Typeset`pod13$$], 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa19831492913di7c77ha100002feb4044hicbi75d8350669649384844499"}, {14, 
     Hold[Typeset`pod14$$], 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa19841492913di7c77ha1000013g9049fdgd9g2588350669649384844499"}, {15, 
     Hold[Typeset`pod15$$], 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa19851492913di7c77ha1000010a9ci2a169df4ef8350669649384844499"}}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[False], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "15", "datatypes" -> "Math", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "1.347", "parsetiming" -> "0.18", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP19801492913di7c77ha100003h60g4714gg9f9fc", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "16", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa19811492913di7c77ha1000014g771bdi650hc618350669649384844499", "version" -> 
    "2.6", "inputstring" -> "a^2 - 1"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2022, 9, 8, 21, 26, 27.7665717`9.196097176841116}, "Line" -> 
    64, "SessionID" -> 19476632447692935180}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, Typeset`failedpods$$ = {}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = "a^2 - 1"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$}, Typeset`chosen$$,
         Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1073., {441.3544921875, 446.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.871675587813573*^9},ExpressionUUID->"6a7db0ab-d30d-4ea2-a0ec-\
b5326353f455"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1152., 585.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"0d8a3ca7-4233-41ad-9042-a8e9d54b6e99"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 358, 9, 30, "Input",ExpressionUUID->"4d530e1c-2878-437b-b625-c4bbd5189eb3"],
Cell[941, 33, 399, 11, 34, "Output",ExpressionUUID->"988d37ec-a73e-490d-b94e-7dfaebb75cf9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1377, 49, 393, 12, 31, "Input",ExpressionUUID->"5e6ecac5-be89-422a-9e22-d5d06a215d21"],
Cell[1773, 63, 177, 2, 32, "Output",ExpressionUUID->"f6a5dd1f-e368-4eb7-99bb-3488948c0d8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1987, 70, 498, 11, 39, "Input",ExpressionUUID->"7781d084-c5e4-45b5-b781-aa5e441b269f"],
Cell[2488, 83, 489, 16, 34, "Output",ExpressionUUID->"a4f4c10c-5eb5-4c08-abd0-bdcad892690f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3014, 104, 512, 17, 31, "Input",ExpressionUUID->"116cb967-626f-4fb1-9d72-9315686a0d4d"],
Cell[3529, 123, 489, 16, 34, "Output",ExpressionUUID->"10bb27f2-522b-4841-a25a-4ee89cb24bd8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4055, 144, 634, 19, 31, "Input",ExpressionUUID->"bde8463c-ff93-4f92-8b19-d77fad9ff07a"],
Cell[4692, 165, 484, 16, 34, "Output",ExpressionUUID->"a679497e-441d-416d-a06b-78fa26ef62bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5213, 186, 575, 19, 31, "Input",ExpressionUUID->"edea7b5e-67ff-4fc4-b44a-ed75c7c03f1b"],
Cell[5791, 207, 417, 10, 28, "Message",ExpressionUUID->"145335df-406e-411e-81c7-a1ce55ead71d"],
Cell[6211, 219, 597, 19, 34, "Output",ExpressionUUID->"3eb53b43-f1c1-4808-8038-5269c730719b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6845, 243, 345, 7, 31, "Input",ExpressionUUID->"7e37bca1-b651-427f-b84d-576b4e44bd91"],
Cell[7193, 252, 208, 5, 32, "Output",ExpressionUUID->"8c652780-cb25-4d20-abec-35ccaf271d0c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7438, 262, 329, 8, 31, "Input",ExpressionUUID->"44858ccf-63c3-4773-a364-b28ceb42da6f"],
Cell[7770, 272, 255, 6, 32, "Output",ExpressionUUID->"563fe080-51ab-4d78-ad42-7fa48f459bbc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8062, 283, 276, 6, 31, "Input",ExpressionUUID->"f5f1fb08-fdc3-43a0-9544-833e7bb3a0c2"],
Cell[8341, 291, 152, 2, 32, "Output",ExpressionUUID->"d1436dee-037d-4882-9185-ac15c8fe313c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[8530, 298, 304, 7, 31, "Input",ExpressionUUID->"938ec012-54d7-4e29-a408-8b8ff1c7ba7e"],
Cell[8837, 307, 152, 2, 32, "Output",ExpressionUUID->"e165d6a6-13f5-47ac-a193-b2b354ac10a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9026, 314, 323, 8, 31, "Input",ExpressionUUID->"ad0dda36-999a-4b6e-babb-e2374a945a85"],
Cell[9352, 324, 395, 11, 32, "Output",ExpressionUUID->"51874a7b-3c11-42dc-9eff-999e1e042e9b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9784, 340, 308, 7, 31, "Input",ExpressionUUID->"6b1051fd-0190-4878-b97f-932ace55601e"],
Cell[10095, 349, 513, 16, 36, "Output",ExpressionUUID->"1a6761e3-e3f4-43f9-b552-b21413f4a0a0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10645, 370, 156, 3, 67, "Section",ExpressionUUID->"ff0715d7-d4dc-49f2-ae10-46d6f0656e2c"],
Cell[CellGroupData[{
Cell[10826, 377, 162, 3, 54, "Subsection",ExpressionUUID->"b011fb71-d2df-4796-b805-9d0d3182baa0"],
Cell[CellGroupData[{
Cell[11013, 384, 395, 9, 41, "WolframAlphaLong",ExpressionUUID->"0ac9d2fe-0141-4509-8f55-3b8f7002cf62"],
Cell[11411, 395, 457098, 8455, 3114, "Print",ExpressionUUID->"80f660f7-86d5-43ac-9421-e9c27ea34cff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[468546, 8855, 377, 9, 30, "Input",ExpressionUUID->"21c851d1-9be3-48c8-a92b-486449c8e825"],
Cell[468926, 8866, 155, 2, 32, "Output",ExpressionUUID->"5ba1087c-c079-461e-8093-6426f738545c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[469118, 8873, 273, 6, 28, "Input",ExpressionUUID->"060a4a15-50d7-49d1-aa9d-59b3b562db77"],
Cell[469394, 8881, 226, 5, 32, "Output",ExpressionUUID->"7a86489e-2c9f-48df-ab85-05e91feef15e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[469657, 8891, 308, 8, 28, "Input",ExpressionUUID->"8e61a29d-b032-4487-8fb2-d6f765375f54"],
Cell[469968, 8901, 155, 2, 32, "Output",ExpressionUUID->"9d33d9e5-808e-4575-9751-9b4724df9b1d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[470160, 8908, 310, 8, 28, "Input",ExpressionUUID->"4bd6e226-d04d-4dc3-9d86-f2a5abc2c843"],
Cell[470473, 8918, 325, 8, 32, "Output",ExpressionUUID->"e09c041e-0a9b-4748-84c0-5755f23cc60c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[470835, 8931, 347, 9, 28, "Input",ExpressionUUID->"a30b8194-18e8-47a3-83cd-b6ee6a5eab7b"],
Cell[471185, 8942, 299, 8, 32, "Output",ExpressionUUID->"db2230fa-3079-4dff-8408-636109a6f8a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[471521, 8955, 315, 7, 28, "Input",ExpressionUUID->"d5fbf5a9-9622-440a-8d4a-f6b95741622b"],
Cell[471839, 8964, 152, 2, 32, "Output",ExpressionUUID->"c1cdc70d-8f6b-4cc9-a026-f7fe5e7b3549"]
}, Open  ]],
Cell[472006, 8969, 2508, 70, 79, "Input",ExpressionUUID->"4ab90be1-a7fe-46f1-bbb6-304ce127aca4"],
Cell[CellGroupData[{
Cell[474539, 9043, 515, 15, 28, "Input",ExpressionUUID->"8e64b351-f4a5-4eb7-aa26-358c9f327ff2"],
Cell[475057, 9060, 460, 13, 32, "Output",ExpressionUUID->"1f0e34b1-dff6-4fdc-b386-01441ab2d8a6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[475554, 9078, 562, 16, 28, "Input",ExpressionUUID->"5506c748-a26b-481d-89d7-9bf5fc2f63a6"],
Cell[476119, 9096, 458, 13, 32, "Output",ExpressionUUID->"0437409b-6aa2-4bca-ba80-3ff55703f6bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[476614, 9114, 610, 17, 28, "Input",ExpressionUUID->"c9ac2679-cfd0-4d21-b772-c954251d3422"],
Cell[477227, 9133, 152, 2, 32, "Output",ExpressionUUID->"28e79f2b-6634-42a3-9226-8753094cc891"]
}, Open  ]],
Cell[CellGroupData[{
Cell[477416, 9140, 416, 10, 28, "Input",ExpressionUUID->"3f843760-4039-4f5c-ba85-0cf59eb14ec5"],
Cell[477835, 9152, 493, 12, 32, "Output",ExpressionUUID->"ea5a7d70-4941-4e46-9269-da82a1e0d9ab"]
}, Open  ]],
Cell[CellGroupData[{
Cell[478365, 9169, 451, 11, 28, "Input",ExpressionUUID->"a5b5b854-b866-4d6a-87a1-39550d8889fd"],
Cell[478819, 9182, 665, 20, 96, "Output",ExpressionUUID->"2ac25c0a-7825-4437-9ce7-624138a993c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[479521, 9207, 668, 18, 28, "Input",ExpressionUUID->"13079a82-1426-4871-ba35-8c9b19724715"],
Cell[480192, 9227, 1095, 35, 114, "Output",ExpressionUUID->"00a5476e-509b-48db-b6fa-7aff219f4eed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[481324, 9267, 831, 23, 28, "Input",ExpressionUUID->"e82c9895-a207-4aa1-8c1a-a53c816d8482"],
Cell[482158, 9292, 1122, 35, 114, "Output",ExpressionUUID->"0681edc8-fbab-42e6-af7e-1472ef67202e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[483317, 9332, 1087, 28, 48, "Input",ExpressionUUID->"7c87f833-bcd9-46ee-bc33-369f82e6b6c6"],
Cell[484407, 9362, 633, 14, 111, "Output",ExpressionUUID->"48bcf289-287a-4006-823f-e381f338a35b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[485077, 9381, 289, 6, 28, "Input",ExpressionUUID->"3c696662-ba21-42fa-b3e9-c2a9b623e1aa"],
Cell[485369, 9389, 227, 4, 32, "Output",ExpressionUUID->"824a8c7b-6e5b-4764-bd65-7ff063be899f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[485633, 9398, 290, 6, 28, "Input",ExpressionUUID->"893950d2-3b0f-49ea-af96-3920c7019c5f"],
Cell[485926, 9406, 231, 4, 32, "Output",ExpressionUUID->"00952187-29d2-4ea9-af17-77f0546d7790"]
}, Open  ]],
Cell[CellGroupData[{
Cell[486194, 9415, 378, 9, 28, "Input",ExpressionUUID->"7dc77efe-ba13-4bc4-bb7f-e7617b74cf39"],
Cell[486575, 9426, 412, 12, 32, "Output",ExpressionUUID->"2e2445ac-127a-4b48-989f-a93f154113f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[487024, 9443, 376, 9, 28, "Input",ExpressionUUID->"64d77085-68d3-40b2-bc93-03a0dbcba31c"],
Cell[487403, 9454, 368, 10, 32, "Output",ExpressionUUID->"f43f79bc-89f2-45bf-af34-c67d119dc86d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[487808, 9469, 606, 16, 28, "Input",ExpressionUUID->"c9d766fd-b9dc-444f-8d21-da0f2b410917"],
Cell[488417, 9487, 518, 13, 32, "Output",ExpressionUUID->"5f93c738-e602-408e-b79f-9652982eb6bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[488972, 9505, 749, 21, 28, "Input",ExpressionUUID->"bb15faae-39f8-4d20-a513-2163110daac8"],
Cell[489724, 9528, 870, 26, 32, "Output",ExpressionUUID->"68faf0c3-3f53-4335-8874-218ab982b79b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[490631, 9559, 748, 21, 28, "Input",ExpressionUUID->"2de19b2a-c301-48a3-acd3-2eb3621b6eb2"],
Cell[491382, 9582, 274, 6, 32, "Output",ExpressionUUID->"3416c856-e07d-493e-a581-4c4f46c50f02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[491693, 9593, 887, 25, 28, "Input",ExpressionUUID->"fd2e5c1b-bc3e-4787-897d-56e13aa25aac"],
Cell[492583, 9620, 325, 8, 32, "Output",ExpressionUUID->"472131d0-a2c5-43e4-a4a7-bee5090ad3e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[492945, 9633, 213, 3, 28, "Input",ExpressionUUID->"b2918b25-a890-480d-a77c-f5b477f59c6b"],
Cell[493161, 9638, 203, 4, 32, "Output",ExpressionUUID->"58afd424-7ed5-4456-ad08-765aa7c2d11a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[493401, 9647, 339, 8, 28, "Input",ExpressionUUID->"188c4b91-45d2-416e-ac2c-16e228336733"],
Cell[493743, 9657, 229, 4, 32, "Output",ExpressionUUID->"58cd1485-3e96-4953-b314-bfc6b761dc7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[494009, 9666, 493, 12, 28, "Input",ExpressionUUID->"7f4a4cd3-96ff-4d62-8fb8-26ef4a16af71"],
Cell[494505, 9680, 227, 4, 32, "Output",ExpressionUUID->"2c387070-b31f-47e7-87b2-5c436067c183"]
}, Open  ]],
Cell[CellGroupData[{
Cell[494769, 9689, 338, 8, 28, "Input",ExpressionUUID->"c83b5b0e-a94c-4488-b1dd-44d1e479cb3d"],
Cell[495110, 9699, 183, 3, 32, "Output",ExpressionUUID->"7d9776e7-a001-473b-b08e-73fedb547c4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[495330, 9707, 469, 13, 28, "Input",ExpressionUUID->"795e898f-c823-43a6-9e9b-0040bb6d3518"],
Cell[495802, 9722, 333, 9, 32, "Output",ExpressionUUID->"076d81d4-647f-4795-ad9a-c74ee8deb37c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[496172, 9736, 512, 14, 28, "Input",ExpressionUUID->"33132d6d-20eb-4175-8cff-c2dc1c6160d7"],
Cell[496687, 9752, 335, 9, 32, "Output",ExpressionUUID->"993671a9-6266-4be8-be3d-f638ea1168a0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[497059, 9766, 522, 14, 28, "Input",ExpressionUUID->"7002a894-9dc1-4f11-99e8-80ee6d786651"],
Cell[497584, 9782, 312, 7, 32, "Output",ExpressionUUID->"5ddbcc6d-1dc8-416d-821a-750d8b429e91"]
}, Open  ]],
Cell[CellGroupData[{
Cell[497933, 9794, 523, 14, 28, "Input",ExpressionUUID->"cd6ed332-ae99-4af9-9eb4-d9d0571e33ae"],
Cell[498459, 9810, 209, 5, 32, "Output",ExpressionUUID->"291a5bbc-2101-4644-85a7-ce694e2cbcc8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[498705, 9820, 574, 16, 28, "Input",ExpressionUUID->"90a85768-0f16-4fea-bb6e-251a6406c70a"],
Cell[499282, 9838, 178, 2, 32, "Output",ExpressionUUID->"e9f9f837-9939-48d9-a4c7-c4fb4c11170a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[499497, 9845, 577, 16, 30, "Input",ExpressionUUID->"ebfdff87-b6df-4385-bd5d-19fc89e85656"],
Cell[500077, 9863, 209, 5, 32, "Output",ExpressionUUID->"b6f90121-ca96-4267-95c5-0d258b8e4fc2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[500323, 9873, 447, 12, 28, "Input",ExpressionUUID->"dc397a2f-b938-4490-a3bb-ec924765adf3"],
Cell[500773, 9887, 209, 5, 32, "Output",ExpressionUUID->"7f8839ea-7c40-476a-be05-534ea0764e15"]
}, Open  ]],
Cell[CellGroupData[{
Cell[501019, 9897, 973, 29, 30, "Input",ExpressionUUID->"f9026321-560d-4185-8cbd-6a2051640bd0"],
Cell[501995, 9928, 155, 2, 32, "Output",ExpressionUUID->"9b89dcd7-4476-4bd8-ae6c-7ed38afe39e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[502187, 9935, 970, 29, 30, "Input",ExpressionUUID->"4d1f99f6-8d3e-4fcc-a3c5-2571fc22ac58"],
Cell[503160, 9966, 207, 5, 32, "Output",ExpressionUUID->"a0763177-2b6e-43b8-a132-67e7596fadcd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[503404, 9976, 1044, 32, 30, "Input",ExpressionUUID->"5769a506-ed36-4740-a2bf-1b2ebf1d42ac"],
Cell[504451, 10010, 154, 2, 32, "Output",ExpressionUUID->"d53182d1-005a-4d75-a650-d79e7f999fe3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[504642, 10017, 1043, 32, 30, "Input",ExpressionUUID->"464ee1dd-b74f-466e-8fbb-47dcaeff7b36"],
Cell[505688, 10051, 153, 2, 32, "Output",ExpressionUUID->"f4ddb8eb-628c-467e-8f34-3888efab334c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[505878, 10058, 971, 29, 30, "Input",ExpressionUUID->"c2c1d8e6-339e-4d2f-90ff-67f847e8df85"],
Cell[506852, 10089, 206, 5, 32, "Output",ExpressionUUID->"9dea5fa8-b0dd-404a-9147-ffd63c90459e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[507095, 10099, 1030, 30, 30, "Input",ExpressionUUID->"cd5acb45-3bfe-442f-a8ac-dea14b5f21de"],
Cell[508128, 10131, 1546, 53, 34, "Output",ExpressionUUID->"ae61269d-c3bf-4f3e-afc1-e75a6f9bad35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[509711, 10189, 584, 16, 30, "Input",ExpressionUUID->"5842922f-d60f-4379-8f70-c4f93bde0968"],
Cell[510298, 10207, 445, 14, 34, "Output",ExpressionUUID->"d9042f3a-14f4-45fc-a6f7-6cb26f4dfb9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[510780, 10226, 589, 18, 30, "Input",ExpressionUUID->"527f0106-ee3c-4a02-bc0c-37f98aeeec1e"],
Cell[511372, 10246, 490, 16, 46, "Output",ExpressionUUID->"40df5561-efc4-42d9-a9cc-3fb1d8d51be0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[511899, 10267, 366, 8, 41, "WolframAlphaLong",ExpressionUUID->"983184f2-1e1f-4e43-9c20-40c862baf620"],
Cell[512268, 10277, 36858, 739, 898, "Print",ExpressionUUID->"6a7db0ab-d30d-4ea2-a0ec-b5326353f455"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

